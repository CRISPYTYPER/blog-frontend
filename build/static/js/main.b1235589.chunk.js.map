{"version":3,"sources":["components/common/Responsive.js","lib/styles/palette.js","components/common/Button.js","components/common/Header.js","lib/api/client.js","lib/api/auth.js","modules/loading.js","lib/createRequestSaga.js","modules/user.js","containers/common/HeaderContainer.js","components/common/SubInfo.js","components/common/Tags.js","components/posts/PostList.js","modules/posts.js","lib/api/posts.js","containers/posts/PostListContainer.js","components/posts/Pagination.js","containers/posts/PaginationContainer.js","pages/PostListPage.js","components/auth/AuthTemplate.js","modules/auth.js","components/auth/AuthForm.js","containers/auth/LoginForm.js","pages/LoginPage.js","containers/auth/RegisterForm.js","pages/RegisterPage.js","components/write/Editor.js","modules/write.js","containers/write/EditorContainer.js","components/write/TagBox.js","containers/write/TagBoxContainer.js","components/write/WriteActionButtons.js","containers/write/WriteActionButtonsContainer.js","pages/WritePage.js","modules/post.js","components/post/PostViewer.js","components/common/AskModal.js","components/post/AskRemoveModal.js","components/post/PostActionButtons.js","containers/post/PostViewerContainer.js","pages/PostPage.js","App.js","modules/index.js","index.js"],"names":["ResponsiveBlock","styled","div","Responsive","children","rest","palette","gray","cyan","buttonStyle","css","props","fullWidth","StyledButton","button","StyledLink","Link","Button","to","HeaderBlock","Wrapper","Spacer","UserInfo","Header","user","onLogout","className","username","onClick","client","axios","create","logout","post","START_LOADING","FINISH_LOADING","startLoading","createAction","requestType","finishLoading","loading","handleActions","state","action","payload","createRequestActionTypes","type","createRequestSaga","request","SUCCESS","FAILURE","put","call","response","data","meta","error","logoutSaga","userSaga","TEMP_SET_USER","CHECK","CHECK_SUCCESS","CHECK_FAILURE","LOGOUT","tempSetUser","check","checkSaga","get","checkFailureSaga","localStorage","removeItem","e","console","log","authAPI","takeLatest","checkError","HeaderContainer","useSelector","dispatch","useDispatch","SubInfoBlock","hasMarginTop","SubInfo","publishedDate","Date","toLocaleDateString","TagsBlock","Tags","tags","map","tag","PostListBlock","WritePostButtonWrapper","PostItemBlock","PostItem","title","body","_id","PostList","posts","showWriteButton","postsSaga","LIST_POSTS","LIST_POSTS_SUCCESS","LIST_POSTS_FAILURE","listPosts","page","listPostsSaga","queryString","qs","stringify","lastPage","parseInt","headers","withRouter","location","match","useEffect","params","parse","search","ignoreQueryPrefix","PaginationBlock","PageNumber","buildLink","query","Pagination","disabled","undefined","PostListPage","AuthTemplateBlock","WhiteBox","AuthTemplate","authSaga","CHANGE_FIELD","INITIALIZE_FORM","REGISTER","REGISTER_SUCCESS","REGISTER_FAILURE","LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","changeField","form","key","value","initializeForm","register","password","login","registerSaga","loginSaga","initialState","passwordConfirm","auth","authError","produce","draft","AuthFormBlock","StyledInput","input","Footer","ButtonWithMarginTop","textMap","ErrorMessage","AuthForm","onChange","onSubmit","text","autoComplete","name","placeholder","style","marginTop","history","useState","setError","push","setItem","JSON","target","preventDefault","LoginPage","status","includes","RegisterPage","EditorBlock","TitleInput","QuillWrapper","Editor","onChangeField","quillElement","useRef","quillInstance","current","Quill","theme","modules","toolbar","header","list","quill","on","delta","oldDelta","source","root","innerHTML","mounted","ref","writeSaga","INITIALIZE","WRITE_POST","WRITE_POST_SUCCESS","WRITE_POST_FAILURE","SET_ORIGINAL_POST","UPDATE_POST","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","initialize","writePost","setOriginalPost","updatePost","id","writePostSaga","updatePostSaga","patch","postError","originalPostId","write","EditorContainer","useCallback","TagBoxBlock","TagForm","Tag","TagListBlock","TagItem","React","memo","onRemove","TagList","TagBox","onChangeTags","setInput","localTags","setLocalTags","insertTag","nextTags","filter","t","trim","TagBoxContainer","WriteActionButtonsBlock","WriteActionButtons","onCancel","onPublish","isEdit","goBack","WritePage","postSaga","READ_POST","READ_POST_SUCCESS","READ_POST_FAILURE","UNLOAD_POST","readPost","unloadPost","readPostSaga","PostViewerBlock","PostHead","PostContent","PostViewer","actionButtons","dangerouslySetInnerHTML","__html","Fullscreen","AskModalBlock","AskModal","visible","description","confirmText","cancelText","onConfirm","AskRemoveModal","PostActionButtonsBlock","ActionButton","PostActionButtons","onEdit","modal","setModal","postId","a","delete","ownPost","PostPage","App","component","path","exact","rootSaga","all","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","getItem","loadUser","ReactDOM","render","document","getElementById"],"mappings":"yQAEMA,EAAkBC,IAAOC,IAAV,mYAqBNC,EANI,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,SAAaC,EAAW,iBAG1C,OAAO,cAACL,EAAD,2BAAqBK,GAArB,aAA4BD,M,QCSxBE,EA3BC,CACZC,KAAM,CACF,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEJC,KAAM,CACF,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YCrBFC,EAAcC,YAAH,oZAUCJ,EAAQC,KAAK,GAETD,EAAQC,KAAK,IAG7B,SAACI,GAAD,OACEA,EAAMC,WACNF,YADA,4KAQF,SAACC,GAAD,OACEA,EAAMH,MACNE,YADA,yIAEkBJ,EAAQE,KAAK,GAETF,EAAQE,KAAK,MAKrBF,EAAQC,KAAK,GAClBD,EAAQC,KAAK,IAKxBM,EAAeZ,IAAOa,OAAV,oCACZL,GAGAM,EAAad,YAAOe,IAAPf,CAAH,oCACVQ,GAoBSQ,EAjBA,SAACN,GAUZ,OAAOA,EAAMO,GACT,cAACH,EAAD,2BAAgBJ,GAAhB,IAAuBH,KAAMG,EAAMH,KAAO,EAAI,KAE9C,cAACK,EAAD,eAAkBF,KC5DpBQ,EAAclB,IAAOC,IAAV,8IAUXkB,EAAUnB,YAAOE,EAAPF,CAAH,0aAmBPoB,EAASpB,IAAOC,IAAV,+CAINoB,EAAWrB,IAAOC,IAAV,4EA8BCqB,EAzBA,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACpB,OACI,qCACI,cAACN,EAAD,UACI,eAACC,EAAD,WACI,cAAC,IAAD,CAAMF,GAAG,IAAIQ,UAAU,OAAvB,sBAGCF,EACG,sBAAKE,UAAU,QAAf,UACI,cAACJ,EAAD,UAAWE,EAAKG,WAChB,cAAC,EAAD,CAAQC,QAASH,EAAjB,yCAGJ,qBAAKC,UAAU,QAAf,SACI,cAAC,EAAD,CAAQR,GAAG,SAAX,uCAKhB,cAACG,EAAD,Q,kECvCGQ,E,OAtBAC,EAAMC,SCYRC,EAAS,kBAAMH,EAAOI,KAAK,qBCZlCC,EAAgB,wBAChBC,EAAiB,yBAMVC,EAAeC,YACxBH,GACA,SAACI,GAAD,OAAiBA,KAGRC,EAAgBF,YACzBF,GACA,SAACG,GAAD,OAAiBA,KAmBNE,EAdCC,aAAa,mBAEpBP,GAAgB,SAACQ,EAAOC,GAAR,mBAAC,eACXD,GADU,kBAEZC,EAAOC,SAAU,OAJD,cAMpBT,GAAiB,SAACO,EAAOC,GAAR,mBAAC,eACZD,GADW,kBAEbC,EAAOC,SAAU,OARD,GAFR,IChBRC,EAA2B,SAACC,GAGrC,MAAO,CAACA,EAFK,UAAMA,EAAN,YACA,UAAMA,EAAN,cAIF,SAASC,GAAkBD,EAAME,GAC5C,IAAMC,EAAO,UAAMH,EAAN,YACPI,EAAO,UAAMJ,EAAN,YAEb,iBAAO,WAAWH,GAAX,uEACH,OADG,SACGQ,YAAIf,EAAaU,IADpB,OAGkB,OAHlB,kBAGwBM,YAAKJ,EAASL,EAAOC,SAH7C,OAIC,OADMS,EAHP,gBAIOF,YAAI,CACNL,KAAMG,EACNL,QAASS,EAASC,KAClBC,KAAMF,IAPX,+BAUC,OAVD,oCAUOF,YAAI,CACNL,KAAMI,EACNN,QAAQ,EAAD,GACPY,OAAO,IAbZ,QAgBH,OAhBG,UAgBGL,YAAIZ,EAAcO,IAhBrB,yD,gBCeDW,I,YAQOC,IA7BXC,GAAgB,qBAEtB,GACId,EAAyB,cAD7B,qBAAOe,GAAP,MAAcC,GAAd,MAA6BC,GAA7B,MAGMC,GAAS,cAEFC,GAAc3B,YAAasB,IAAe,SAACnC,GAAD,OAAUA,KACpDyC,GAAQ5B,YAAauB,IACrB5B,GAASK,YAAa0B,IAE7BG,GAAYnB,GAAkBa,IHPf,kBAAM/B,EAAOsC,IAAI,sBGStC,SAASC,KACL,IACIC,aAAaC,WAAW,QAC1B,MAAOC,GACLC,QAAQC,IAAI,gCAIpB,SAAUhB,KAAV,iEAEQ,OAFR,kBAEcL,YAAKsB,GAFnB,OAGQL,aAAaC,WAAW,QAHhC,+CAKQE,QAAQC,IAAR,MALR,qDAQO,SAAUf,KAAV,iEACH,OADG,SACGiB,YAAWf,GAAOM,IADrB,OAEH,OAFG,SAEGS,YAAWb,GAAeM,IAF7B,OAGH,OAHG,SAGGO,YAAWZ,GAAQN,IAHtB,wCAMP,I,qBAKehB,gBAAa,iBAAC,EAEpBkB,IAAgB,SAACjB,EAAD,OAAmBlB,EAAnB,EAAUoB,QAAV,mBAAC,eACXF,GADU,IAEblB,YAJgB,YAAC,EAMpBqC,IAAgB,SAACnB,EAAD,OAAmBlB,EAAnB,EAAUoB,QAAV,mBAAC,eACXF,GADU,IAEblB,OACAoD,WAAY,UATI,YAAC,EAWpBd,IAAgB,SAACpB,EAAD,OAAmBc,EAAnB,EAAUZ,QAAV,mBAAC,eACXF,GADU,IAEblB,KAAM,KACNoD,WAAYpB,OAdI,YAAC,EAgBpBO,IAAS,SAACrB,GAAD,mBAAC,eACJA,GADG,IAENlB,KAAM,UAlBU,GALP,CACjBA,KAAM,KACNoD,WAAY,OC/BDC,GATS,WACpB,IAAQrD,EAASsD,aAAY,kBAAe,CAAEtD,KAAjB,EAAGA,KAAyBA,SAAjDA,KACFuD,EAAWC,cAIjB,OAAO,cAAC,EAAD,CAAQxD,KAAMA,EAAMC,SAHV,WACbsD,EAAS/C,U,uCCJXiD,GAAehF,IAAOC,IAAV,iqBACZ,SAACS,GAAD,OACEA,EAAMuE,cACNxE,YADA,uEAIKJ,EAAQC,KAAK,GAITD,EAAQC,KAAK,IAoBf4E,GAbC,SAAC,GAA+C,IAA7CxD,EAA4C,EAA5CA,SAAUyD,EAAkC,EAAlCA,cAAeF,EAAmB,EAAnBA,aACxC,OACI,eAACD,GAAD,CAAcC,aAAcA,EAA5B,UACI,+BACI,4BACI,cAAC,IAAD,CAAMhE,GAAE,YAAOS,GAAf,SAA4BA,QAGpC,+BAAO,IAAI0D,KAAKD,GAAeE,2BCzBrCC,GAAYtF,IAAOC,IAAV,oPAIEI,EAAQE,KAAK,GAITF,EAAQE,KAAK,IAiBnBgF,GAZF,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACZ,OACI,cAACF,GAAD,UACKE,EAAKC,KAAI,SAACC,GAAD,OACN,eAAC,IAAD,CAAMjE,UAAU,MAAMR,GAAE,gBAAWyE,GAAnC,cACMA,IADyCA,SCbzDC,GAAgB3F,YAAOE,EAAPF,CAAH,qDAIb4F,GAAyB5F,IAAOC,IAAV,4LAMtB4F,GAAgB7F,IAAOC,IAAV,0cAQaI,EAAQC,KAAK,GAQxBD,EAAQC,KAAK,IAkC5BwF,GAAW,SAAC,GAAc,IAAZ9D,EAAW,EAAXA,KACRmD,EAAgDnD,EAAhDmD,cAAe5D,EAAiCS,EAAjCT,KAAMiE,EAA2BxD,EAA3BwD,KAAMO,EAAqB/D,EAArB+D,MAAOC,EAAchE,EAAdgE,KAAMC,EAAQjE,EAARiE,IAChD,OACI,eAACJ,GAAD,WACI,6BACI,cAAC,IAAD,CAAM5E,GAAE,YAAOM,EAAKG,SAAZ,YAAwBuE,GAAhC,SAAwCF,MAE5C,cAAC,GAAD,CACIrE,SAAUH,EAAKG,SACfyD,cAAe,IAAIC,KAAKD,KAE5B,cAAC,GAAD,CAAMK,KAAMA,IACZ,4BAAIQ,QA+BDE,GA1BE,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,MAAO5D,EAAsC,EAAtCA,QAASgB,EAA6B,EAA7BA,MAAO6C,EAAsB,EAAtBA,gBAEvC,OAAI7C,EACO,cAACoC,GAAD,uEAGP,eAACA,GAAD,WACI,cAACC,GAAD,UACKQ,GACG,cAAC,EAAD,CAAQ7F,MAAI,EAACU,GAAG,SAAhB,uDAMNsB,GAAW4D,GACT,8BACKA,EAAMV,KAAI,SAACzD,GAAD,OACP,cAAC,GAAD,CAAUA,KAAMA,GAAWA,EAAKiE,c,YCvFvCI,IATjB,GACIzD,EAAyB,oBAD7B,qBAAO0D,GAAP,MAAmBC,GAAnB,MAAuCC,GAAvC,MAGaC,GAAYrE,YACrBkE,IACA,kBAA8B,CAAEZ,IAAhC,EAAGA,IAAkChE,SAArC,EAAQA,SAAuCgF,KAA/C,EAAkBA,SAGhBC,GAAgB7D,GAAkBwD,ICPf,SAAC,GAA6B,IAA3BI,EAA0B,EAA1BA,KAAMhF,EAAoB,EAApBA,SAAUgE,EAAU,EAAVA,IAClCkB,EAAcC,KAAGC,UAAU,CAC7BJ,OACAhF,WACAgE,QAEJ,OAAO9D,EAAOsC,IAAP,qBAAyB0C,ODE7B,SAAUP,KAAV,iEACH,OADG,SACG3B,YAAW4B,GAAYK,IAD1B,wCAIP,I,eAqBeR,GAfD3D,aAAa,kBAAC,GAEnB+D,IAAqB,SAAC9D,EAAD,OAAmB0D,EAAnB,EAAUxD,QAAsBS,EAAhC,EAA0BE,KAA1B,mBAAC,eAChBb,GADe,IAElB0D,QACAY,SAAUC,SAAS5D,EAAS6D,QAAQ,aAAc,SALnC,YAAC,GAOnBT,IAAqB,SAAC/D,EAAD,OAAmBc,EAAnB,EAAUZ,QAAV,mBAAC,eAChBF,GADe,IAElBc,aATe,IANN,CACjB4C,MAAO,KACP5C,MAAO,KACPwD,SAAU,IEYCG,gBA5BW,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAC7BtC,EAAWC,cACjB,EAAwCF,aACpC,gBAAGsB,EAAH,EAAGA,MAAO5D,EAAV,EAAUA,QAAShB,EAAnB,EAAmBA,KAAnB,MAA+B,CAC3B4E,MAAOA,EAAMA,MACb5C,MAAO4C,EAAM5C,MACbhB,QAASA,EAAQ,oBACjBhB,KAAMA,EAAKA,SALX4E,EAAR,EAAQA,MAAO5C,EAAf,EAAeA,MAAOhB,EAAtB,EAAsBA,QAAShB,EAA/B,EAA+BA,KAgB/B,OARA8F,sBAAU,WACN,IAAQ3F,EAAa0F,EAAME,OAAnB5F,SACR,EAAsBmF,KAAGU,MAAMJ,EAASK,OAAQ,CAC5CC,mBAAmB,IADf/B,EAAR,EAAQA,IAAKgB,EAAb,EAAaA,KAGb5B,EAAS2B,GAAU,CAAEf,MAAKhE,WAAUgF,YACrC,CAAC5B,EAAUqC,EAASK,OAAQJ,EAAME,SAGjC,cAAC,GAAD,CACI/E,QAASA,EACTgB,MAAOA,EACP4C,MAAOA,EACPC,gBAAiB7E,OC1BvBmG,GAAkB1H,IAAOC,IAAV,yJAOf0H,GAAa3H,IAAOC,IAAV,4BAEV2H,GAAY,SAAC,GAA6B,IAA3BlG,EAA0B,EAA1BA,SAAUgE,EAAgB,EAAhBA,IAAKgB,EAAW,EAAXA,KAC1BmB,EAAQhB,KAAGC,UAAU,CAAEpB,MAAKgB,SAClC,OAAOhF,EAAQ,YAAQA,EAAR,YAAoBmG,GAApB,YAAmCA,IA+BvCC,GA5BI,SAAC,GAAuC,IAArCpB,EAAoC,EAApCA,KAAMK,EAA8B,EAA9BA,SAAUrF,EAAoB,EAApBA,SAAUgE,EAAU,EAAVA,IAC5C,OACI,eAACgC,GAAD,WACI,cAAC,EAAD,CACIK,SAAmB,IAATrB,EACVzF,GACa,IAATyF,OACMsB,EACAJ,GAAU,CAAElG,WAAUgE,MAAKgB,KAAMA,EAAO,IALtD,0BAUA,cAACiB,GAAD,UAAajB,IACb,cAAC,EAAD,CACIqB,SAAUrB,IAASK,EACnB9F,GACIyF,IAASK,OACHiB,EACAJ,GAAU,CAAElG,WAAUgE,MAAKgB,KAAMA,EAAO,IALtD,8BCDGQ,gBA1Ba,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MACrC,EAAqCvC,aAAY,gBAAGsB,EAAH,EAAGA,MAAO5D,EAAV,EAAUA,QAAV,MAAyB,CACtEwE,SAAUZ,EAAMY,SAChBZ,MAAOA,EAAMA,MACb5D,QAASA,EAAQ,wBAHbwE,EAAR,EAAQA,SAAUZ,EAAlB,EAAkBA,MAAO5D,EAAzB,EAAyBA,QAOzB,IAAK4D,GAAS5D,EAAS,OAAO,KAE9B,IAAQb,EAAa0F,EAAME,OAAnB5F,SAER,EAA0BmF,KAAGU,MAAMJ,EAASK,OAAQ,CAChDC,mBAAmB,IADf/B,EAAR,EAAQA,IAAR,IAAagB,YAAb,MAAoB,EAApB,EAIA,OACI,cAAC,GAAD,CACIhB,IAAKA,EACLhE,SAAUA,EACVgF,KAAMM,SAASN,EAAM,IACrBK,SAAUA,OCZPkB,GAVM,WACjB,OACI,qCACI,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,QCANC,GAAoBlI,IAAOC,IAAV,yTAMLI,EAAQC,KAAK,IASzB6H,GAAWnI,IAAOC,IAAV,6UA4BCmI,GAbM,SAAC,GAAkB,IAAhBjI,EAAe,EAAfA,SACpB,OACI,cAAC+H,GAAD,UACI,eAACC,GAAD,WACI,qBAAK1G,UAAU,YAAf,SACI,cAAC,IAAD,CAAMR,GAAG,IAAT,wBAEHd,Q,qBCGAkI,IAvCXC,GAAe,oBACfC,GAAkB,uBASxB,GACI3F,EAAyB,iBAD7B,qBAAO4F,GAAP,MAAiBC,GAAjB,MAAmCC,GAAnC,MAGA,GACI9F,EAAyB,cAD7B,qBAAO+F,GAAP,MAAcC,GAAd,MAA6BC,GAA7B,MAIaC,GAAc1G,YACvBkG,IACA,kBAA2B,CACvBS,KADJ,EAAGA,KAECC,IAFJ,EAASA,IAGLC,MAHJ,EAAcA,UAMLC,GAAiB9G,YAAamG,IAAiB,SAACQ,GAAD,OAAUA,KAEzDI,GAAW/G,YAAaoG,IAAU,kBAA6B,CACxE9G,SAD2C,EAAGA,SAE9C0H,SAF2C,EAAaA,aAI/CC,GAAQjH,YAAauG,IAAO,kBAA6B,CAClEjH,SADqC,EAAGA,SAExC0H,SAFqC,EAAaA,aAMhDE,GAAexG,GAAkB0F,IfxCf,SAAC,GAAD,IAAG9G,EAAH,EAAGA,SAAU0H,EAAb,EAAaA,SAAb,OACpBxH,EAAOI,KAAK,qBAAsB,CAAEN,WAAU0H,gBewC5CG,GAAYzG,GAAkB6F,If7Cf,SAAC,GAAD,IAAGjH,EAAH,EAAGA,SAAU0H,EAAb,EAAaA,SAAb,OACjBxH,EAAOI,KAAK,kBAAmB,CAAEN,WAAU0H,gBe6CxC,SAAUf,KAAV,iEACH,OADG,SACG3D,YAAW8D,GAAUc,IADxB,OAEH,OAFG,SAEG5E,YAAWiE,GAAOY,IAFrB,wCAKP,I,2BAAMC,GAAe,CACjBL,SAAU,CACNzH,SAAU,GACV0H,SAAU,GACVK,gBAAiB,IAErBJ,MAAO,CACH3H,SAAU,GACV0H,SAAU,IAEdM,KAAM,KACNC,UAAW,MA6CAD,GAtCFlH,aAAa,kBAAC,GAElB8F,IAAe,SAAC7F,EAAD,WAAUE,QAAWoG,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,IAAKC,EAAhC,EAAgCA,MAAhC,OACZW,aAAQnH,GAAO,SAACoH,GAEZA,EAAMd,GAAMC,GAAOC,QALT,YAAC,GAOlBV,IAAkB,SAAC9F,EAAD,SAAmBsG,EAAnB,EAAUpG,QAAV,mBAAC,eACbF,GADY,uBAEdsG,EAAOS,GAAaT,IAFN,0BAGJ,MAHI,OAPD,YAAC,GAalBN,IAAmB,SAAChG,EAAD,OAAmBiH,EAAnB,EAAU/G,QAAV,mBAAC,eACdF,GADa,IAEhBkH,UAAW,KACXD,YAhBc,YAAC,GAmBlBhB,IAAmB,SAACjG,EAAD,OAAmBc,EAAnB,EAAUZ,QAAV,mBAAC,eACdF,GADa,IAEhBkH,UAAWpG,OArBG,YAAC,GAwBlBqF,IAAgB,SAACnG,EAAD,OAAmBiH,EAAnB,EAAU/G,QAAV,mBAAC,eACXF,GADU,IAEbkH,UAAW,KACXD,YA3Bc,YAAC,GA8BlBb,IAAgB,SAACpG,EAAD,OAAmBc,EAAnB,EAAUZ,QAAV,mBAAC,eACXF,GADU,IAEbkH,UAAWpG,OAhCG,IAmCtBiG,IClGEM,GAAgB9J,IAAOC,IAAV,qHAGFI,EAAQC,KAAK,IAQxByJ,GAAc/J,IAAOgK,MAAV,oTAGc3J,EAAQC,KAAK,GAMTD,EAAQC,KAAK,IAU1C2J,GAASjK,IAAOC,IAAV,6MAIKI,EAAQC,KAAK,GAGTD,EAAQC,KAAK,IAK5B4J,GAAsBlK,YAAOgB,EAAPhB,CAAH,qDAInBmK,GAAU,CACZd,MAAO,qBACPF,SAAU,4BAMRiB,GAAepK,IAAOC,IAAV,yHA0DHoK,GAnDE,SAAC,GAA+C,IAA7CxH,EAA4C,EAA5CA,KAAMkG,EAAsC,EAAtCA,KAAMuB,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,SAAUhH,EAAY,EAAZA,MAC1CiH,EAAOL,GAAQtH,GACrB,OACI,eAACiH,GAAD,WACI,6BAAKU,IACL,uBAAMD,SAAUA,EAAhB,UACI,cAACR,GAAD,CACIU,aAAa,WACbC,KAAK,WACLC,YAAY,qBACZL,SAAUA,EACVrB,MAAOF,EAAKrH,WAEhB,cAACqI,GAAD,CACIU,aAAa,eACbC,KAAK,WACLC,YAAY,2BACZ9H,KAAK,WACLyH,SAAUA,EACVrB,MAAOF,EAAKK,WAEN,aAATvG,GACG,cAACkH,GAAD,CACIU,aAAa,eACbC,KAAK,kBACLC,YAAY,wCACZ9H,KAAK,WACLyH,SAAUA,EACVrB,MAAOF,EAAKU,kBAGnBlG,GAAS,cAAC6G,GAAD,UAAe7G,IACzB,cAAC2G,GAAD,CACI3J,MAAI,EACJI,WAAS,EACTiK,MAAO,CAAEC,UAAW,QAHxB,SAKKL,OAGT,cAACP,GAAD,UACc,UAATpH,EACG,cAAC,IAAD,CAAM5B,GAAG,YAAT,sCAEA,cAAC,IAAD,CAAMA,GAAG,SAAT,sCCtCLiG,gBArEG,SAAC,GAAiB,IAAf4D,EAAc,EAAdA,QACjB,EAA0BC,oBAAS,MAAnC,mBAAOxH,EAAP,KAAcyH,EAAd,KAEMlG,EAAWC,cACjB,EAAwCF,aAAY,gBAAG6E,EAAH,EAAGA,KAAMnI,EAAT,EAASA,KAAT,MAAqB,CACrEwH,KAAMW,EAAKL,MACXK,KAAMA,EAAKA,KACXC,UAAWD,EAAKC,UAChBpI,KAAMA,EAAKA,SAJPwH,EAAR,EAAQA,KAAMW,EAAd,EAAcA,KAAMC,EAApB,EAAoBA,UAAWpI,EAA/B,EAA+BA,KAsD/B,OA5BA8F,sBAAU,WACNvC,EAASoE,GAAe,YACzB,CAACpE,IAEJuC,sBAAU,WACN,GAAIsC,EAIA,OAHApF,QAAQC,IAAI,6BACZD,QAAQC,IAAImF,QACZqB,EAAS,mCAGTtB,IACAnF,QAAQC,IAAI,mCACZM,EAASd,SAEd,CAAC0F,EAAMC,EAAW7E,IAErBuC,sBAAU,WACN,GAAI9F,EAAM,CACNuJ,EAAQG,KAAK,KACb,IACI7G,aAAa8G,QAAQ,OAAQC,KAAKrE,UAAUvF,IAC9C,MAAO+C,GACLC,QAAQC,IAAI,mCAGrB,CAACsG,EAASvJ,IAGT,cAAC,GAAD,CACIsB,KAAK,QACLkG,KAAMA,EACNuB,SAnDS,SAAChG,GACd,MAAwBA,EAAE8G,OAAlBnC,EAAR,EAAQA,MAAOyB,EAAf,EAAeA,KACf5F,EACIgE,GAAY,CACRC,KAAM,QACNC,IAAK0B,EACLzB,YA8CJsB,SAxCS,SAACjG,GACdA,EAAE+G,iBACF,IAAQ3J,EAAuBqH,EAAvBrH,SAAU0H,EAAaL,EAAbK,SAClBtE,EAASuE,GAAM,CAAE3H,WAAU0H,eAsCvB7F,MAAOA,OC5DJ+H,GARG,WACd,OACI,cAAC,GAAD,UACI,cAAC,GAAD,OCmGGpE,gBAlGM,SAAC,GAAiB,IAAf4D,EAAc,EAAdA,QACpB,EAA0BC,oBAAS,MAAnC,mBAAOxH,EAAP,KAAcyH,EAAd,KAEMlG,EAAWC,cACjB,EAAwCF,aAAY,gBAAG6E,EAAH,EAAGA,KAAMnI,EAAT,EAASA,KAAT,MAAqB,CACrEwH,KAAMW,EAAKP,SACXO,KAAMA,EAAKA,KACXC,UAAWD,EAAKC,UAChBpI,KAAMA,EAAKA,SAJPwH,EAAR,EAAQA,KAAMW,EAAd,EAAcA,KAAMC,EAApB,EAAoBA,UAAWpI,EAA/B,EAA+BA,KAmF/B,OArCA8F,sBAAU,WACNvC,EAASoE,GAAe,eACzB,CAACpE,IAGJuC,sBAAU,WACN,GAAIsC,EAEA,OAAkC,MAA9BA,EAAUvG,SAASmI,YACnBP,EAAS,oFAIbA,EAAS,yCAITtB,IACAnF,QAAQC,IAAI,yCACZD,QAAQC,IAAIkF,GACZ5E,EAASd,SAEd,CAAC0F,EAAMC,EAAW7E,IAGrBuC,sBAAU,WACN,GAAI9F,EAAM,CACNgD,QAAQC,IAAI,0BACZD,QAAQC,IAAIjD,GACZuJ,EAAQG,KAAK,KACb,IACI7G,aAAa8G,QAAQ,OAAQC,KAAKrE,UAAUvF,IAC9C,MAAO+C,GACLC,QAAQC,IAAI,mCAGrB,CAACsG,EAASvJ,IAET,cAAC,GAAD,CACIsB,KAAK,WACLkG,KAAMA,EACNuB,SAhFS,SAAChG,GACd,MAAwBA,EAAE8G,OAAlBnC,EAAR,EAAQA,MAAOyB,EAAf,EAAeA,KACf5F,EACIgE,GAAY,CACRC,KAAM,WACNC,IAAK0B,EACLzB,YA2EJsB,SArES,SAACjG,GACdA,EAAE+G,iBACF,IAAQ3J,EAAwCqH,EAAxCrH,SAAU0H,EAA8BL,EAA9BK,SAAUK,EAAoBV,EAApBU,gBAE5B,IAAI,CAAC/H,EAAU0H,EAAUK,GAAiB+B,SAAS,IAKnD,OAAIpC,IAAaK,GACbuB,EAAS,qFACTlG,EACIgE,GAAY,CAAEC,KAAM,WAAYC,IAAK,WAAYC,MAAO,WAE5DnE,EACIgE,GAAY,CACRC,KAAM,WACNC,IAAK,kBACLC,MAAO,YAKnBnE,EAASqE,GAAS,CAAEzH,WAAU0H,cAlB1B4B,EAAS,qEAiETzH,MAAOA,OCzFJkI,GARM,WACjB,OACI,cAAC,GAAD,UACI,cAAC,GAAD,O,oBCCNC,I,OAAc1L,YAAOE,EAAPF,CAAH,6JAKX2L,GAAa3L,IAAOgK,MAAV,sMAKe3J,EAAQC,KAAK,IAKtCsL,GAAe5L,IAAOC,IAAV,6SAqEH4L,GAxDA,SAAC,GAAoC,IAAlC9F,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,KAAM8F,EAAoB,EAApBA,cACrBC,EAAeC,kBAAO,MACtBC,EAAgBD,kBAAO,MAE7B3E,sBAAU,WACN4E,EAAcC,QAAU,IAAIC,KAAMJ,EAAaG,QAAS,CACpDE,MAAO,SACPzB,YAAa,uDACb0B,QAAS,CAGLC,QAAS,CACL,CAAC,CAAEC,OAAQ,KAAO,CAAEA,OAAQ,MAC5B,CAAC,OAAQ,SAAU,YAAa,UAChC,CAAC,CAAEC,KAAM,WAAa,CAAEA,KAAM,WAC9B,CAAC,aAAc,aAAc,OAAQ,aAOjD,IAAMC,EAAQR,EAAcC,QAC5BO,EAAMC,GAAG,eAAe,SAACC,EAAOC,EAAUC,GACvB,SAAXA,GACAf,EAAc,CAAE9C,IAAK,OAAQC,MAAOwD,EAAMK,KAAKC,iBAGxD,CAACjB,IAEJ,IAAMkB,EAAUhB,mBAAO,GACvB3E,sBAAU,WACF2F,EAAQd,UACZc,EAAQd,SAAU,EAClBD,EAAcC,QAAQY,KAAKC,UAAY/G,KACxC,CAACA,IAMJ,OACI,eAAC0F,GAAD,WACI,cAACC,GAAD,CACIhB,YAAY,oDACZL,SARU,SAAChG,GACnBwH,EAAc,CAAE9C,IAAK,QAASC,MAAO3E,EAAE8G,OAAOnC,SAQtCA,MAAOlD,IAGX,cAAC6F,GAAD,UACI,qBAAKqB,IAAKlB,U,YC9CTmB,IAhCXC,GAAa,mBACb7E,GAAe,qBACrB,GACI1F,EAAyB,oBAD7B,qBAAOwK,GAAP,MAAmBC,GAAnB,MAAuCC,GAAvC,MAEMC,GAAoB,0BAC1B,GACI3K,EAAyB,qBAD7B,qBAAO4K,GAAP,MAAoBC,GAApB,MAAyCC,GAAzC,MAGaC,GAAavL,YAAa+K,IAC1BrE,GAAc1G,YAAakG,IAAc,kBAAqB,CACvEU,IADkD,EAAGA,IAErDC,MAFkD,EAAQA,UAIjD2E,GAAYxL,YAAagL,IAAY,kBAA4B,CAC1ErH,MAD8C,EAAGA,MAEjDC,KAF8C,EAAUA,KAGxDR,KAH8C,EAAgBA,SAKrDqI,GAAkBzL,YAAamL,IAAmB,SAACvL,GAAD,OAAUA,KAC5D8L,GAAa1L,YACtBoL,IACA,kBAAgC,CAC5BO,GADJ,EAAGA,GAEChI,MAFJ,EAAOA,MAGHC,KAHJ,EAAcA,KAIVR,KAJJ,EAAoBA,SASlBwI,GAAgBlL,GAAkBsK,IblCf,SAAC,GAAD,IAAGrH,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAMR,EAAhB,EAAgBA,KAAhB,OACrB5D,EAAOI,KAAK,aAAc,CAAE+D,QAAOC,OAAMR,YakCvCyI,GAAiBnL,GAAkB0K,IbrBf,SAAC,GAAD,IAAGO,EAAH,EAAGA,GAAIhI,EAAP,EAAOA,MAAOC,EAAd,EAAcA,KAAMR,EAApB,EAAoBA,KAApB,OACtB5D,EAAOsM,MAAP,qBAA2BH,GAAM,CAC7BhI,QACAC,OACAR,YakBD,SAAU0H,KAAV,iEACH,OADG,SACGxI,YAAW0I,GAAYY,IAD1B,OAEH,OAFG,SAEGtJ,YAAW8I,GAAaS,IAF3B,wCAKP,I,qBAAMzE,GAAe,CACjBzD,MAAO,GACPC,KAAM,GACNR,KAAM,GACNxD,KAAM,KACNmM,UAAW,KACXC,eAAgB,MA6CLC,GA1CD7L,aAAa,kBAAC,GAEnB2K,IAAa,SAAC1K,GAAD,OAAW+G,MAFN,YAAC,GAGnBlB,IAAe,SAAC7F,EAAD,WAAUE,QAAWqG,EAArB,EAAqBA,IAAKC,EAA1B,EAA0BA,MAA1B,mBAAC,eACVxG,GADS,kBAEXuG,EAAMC,OALQ,YAAC,GAOnBmE,IAAa,SAAC3K,GAAD,mBAAC,eACRA,GADO,IAGVT,KAAM,KACNmM,UAAW,UAXI,YAAC,GAcnBd,IAAqB,SAAC5K,EAAD,OAAmBT,EAAnB,EAAUW,QAAV,mBAAC,eAChBF,GADe,IAElBT,YAhBe,YAAC,GAmBnBsL,IAAqB,SAAC7K,EAAD,OAAmB0L,EAAnB,EAAUxL,QAAV,mBAAC,eAChBF,GADe,IAElB0L,iBArBe,YAAC,GAuBnBZ,IAAoB,SAAC9K,EAAD,OAAmBT,EAAnB,EAAUW,QAAV,mBAAC,eACfF,GADc,IAEjBsD,MAAO/D,EAAK+D,MACZC,KAAMhE,EAAKgE,KACXR,KAAMxD,EAAKwD,KACX4I,eAAgBpM,EAAKiE,SA5BN,YAAC,GA8BnBwH,IAAsB,SAAChL,EAAD,OAAmBT,EAAnB,EAAUW,QAAV,mBAAC,eACjBF,GADgB,IAEnBT,YAhCe,YAAC,GAkCnB0L,IAAsB,SAACjL,EAAD,OAAmB0L,EAAnB,EAAUxL,QAAV,mBAAC,eACjBF,GADgB,IAEnB0L,iBApCe,IAuCvB3E,ICpEW8E,GAnBS,WACpB,IAAMxJ,EAAWC,cACjB,EAAwBF,aAAY,gBAAGwJ,EAAH,EAAGA,MAAH,MAAgB,CAChDtI,MAAOsI,EAAMtI,MACbC,KAAMqI,EAAMrI,SAFRD,EAAR,EAAQA,MAAOC,EAAf,EAAeA,KAIT8F,EAAgByC,wBAClB,SAAC5L,GAAD,OAAamC,EAASgE,GAAYnG,MAClC,CAACmC,IAQL,OALAuC,sBAAU,WACN,OAAO,WACHvC,EAAS6I,SAEd,CAAC7I,IACG,cAAC,GAAD,CAAQgH,cAAeA,EAAe/F,MAAOA,EAAOC,KAAMA,K,SCjB/DwI,GAAcxO,IAAOC,IAAV,uMAEWI,EAAQC,KAAK,GAIxBD,EAAQC,KAAK,IAMxBmO,GAAUzO,IAAO+I,KAAV,yoBAKW1I,EAAQC,KAAK,GAkBfD,EAAQC,KAAK,GAITD,EAAQC,KAAK,IAKjCoO,GAAM1O,IAAOC,IAAV,4IAEII,EAAQC,KAAK,IAOpBqO,GAAe3O,IAAOC,IAAV,qEAMZ2O,GAAUC,KAAMC,MAAK,gBAAGpJ,EAAH,EAAGA,IAAKqJ,EAAR,EAAQA,SAAR,OACvB,eAACL,GAAD,CAAK/M,QAAS,kBAAMoN,EAASrJ,IAA7B,cAAqCA,QAInCsJ,GAAUH,KAAMC,MAAK,gBAAGtJ,EAAH,EAAGA,KAAMuJ,EAAT,EAASA,SAAT,OACvB,cAACJ,GAAD,UACKnJ,EAAKC,KAAI,SAACC,GAAD,OACN,cAACkJ,GAAD,CAAmBlJ,IAAKA,EAAKqJ,SAAUA,GAAzBrJ,WA+DXuJ,GA1DA,SAAC,GAA4B,IAA1BzJ,EAAyB,EAAzBA,KAAM0J,EAAmB,EAAnBA,aACpB,EAA0BnE,oBAAS,IAAnC,mBAAOf,EAAP,KAAcmF,EAAd,KACA,EAAkCpE,oBAAS,IAA3C,mBAAOqE,EAAP,KAAkBC,EAAlB,KAEMC,EAAYf,wBACd,SAAC7I,GACG,GAAKA,IACD0J,EAAU5D,SAAS9F,GAAvB,CACA,IAAM6J,EAAQ,uBAAOH,GAAP,CAAkB1J,IAChC2J,EAAaE,GACbL,EAAaK,MAEjB,CAACH,EAAWF,IAGVH,EAAWR,wBACb,SAAC7I,GACG,IAAM6J,EAAWH,EAAUI,QAAO,SAACC,GAAD,OAAOA,IAAM/J,KAC/C2J,EAAaE,GACbL,EAAaK,KAEjB,CAACH,EAAWF,IAGV5E,EAAWiE,wBAAY,SAACjK,GAC1B6K,EAAS7K,EAAE8G,OAAOnC,SACnB,IAEGsB,EAAWgE,wBACb,SAACjK,GACGA,EAAE+G,iBACFiE,EAAUtF,EAAM0F,QAChBP,EAAS,MAEb,CAACnF,EAAOsF,IAQZ,OAJAjI,sBAAU,WACNgI,EAAa7J,KACd,CAACA,IAGA,eAACgJ,GAAD,WACI,8CACA,eAACC,GAAD,CAASlE,SAAUA,EAAnB,UACI,uBACII,YAAY,oDACZ1B,MAAOe,EACPM,SAAUA,IAEd,wBAAQzH,KAAK,SAAb,6BAEJ,cAACmM,GAAD,CAASxJ,KAAM4J,EAAWL,SAAUA,QC7GjCY,GAhBS,WACpB,IAAM7K,EAAWC,cACXS,EAAOX,aAAY,SAACpC,GAAD,OAAWA,EAAM4L,MAAM7I,QAWhD,OAAO,cAAC,GAAD,CAAQ0J,aATM,SAACK,GAClBzK,EACIgE,GAAY,CACRE,IAAK,OACLC,MAAOsG,MAKwB/J,KAAMA,KCd/CoK,GAA0B5P,IAAOC,IAAV,2IASvBW,GAAeZ,YAAOgB,EAAPhB,CAAH,uGAkBH6P,GAXY,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,UAAWC,EAAa,EAAbA,OAC/C,OACI,eAACJ,GAAD,WACI,eAAC,GAAD,CAAcrP,MAAI,EAACoB,QAASoO,EAA5B,gCACSC,EAAS,eAAO,kBAEzB,cAAC,GAAD,CAAcrO,QAASmO,EAAvB,8BCiCG5I,gBApDqB,SAAC,GAAiB,IAAf4D,EAAc,EAAdA,QAC7BhG,EAAWC,cACjB,EAA+DF,aAC3D,gBAAGwJ,EAAH,EAAGA,MAAH,MAAgB,CACZtI,MAAOsI,EAAMtI,MACbC,KAAMqI,EAAMrI,KACZR,KAAM6I,EAAM7I,KACZxD,KAAMqM,EAAMrM,KACZmM,UAAWE,EAAMF,UACjBC,eAAgBC,EAAMD,mBAPtBrI,EAAR,EAAQA,MAAOC,EAAf,EAAeA,KAAMR,EAArB,EAAqBA,KAAMxD,EAA3B,EAA2BA,KAAMmM,EAAjC,EAAiCA,UAAWC,EAA5C,EAA4CA,eAyC5C,OATA/G,sBAAU,WACN,GAAIrF,EAAM,CACN,IAAQiE,EAAcjE,EAAdiE,IAAK1E,EAASS,EAATT,KACbuJ,EAAQG,KAAR,YAAkB1J,EAAKG,SAAvB,YAAmCuE,IAEnCkI,GACA5J,QAAQC,IAAI2J,KAEjB,CAACrD,EAAS9I,EAAMmM,IAEf,cAAC,GAAD,CACI4B,UA/BU,WAEVjL,EADAsJ,EACSN,GAAW,CAAE/H,QAAOC,OAAMR,OAAMuI,GAAIK,IAI7CR,GAAU,CACN7H,QACAC,OACAR,WAuBJsK,SAjBS,WACbhF,EAAQmF,UAiBJD,SAAU5B,O,SClCP8B,GAbG,WACd,OACI,eAAC,EAAD,WACI,cAAC,KAAD,UACI,iFAEJ,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,Q,qBCCKC,IARjB,GACIvN,EAAyB,kBAD7B,qBAAOwN,GAAP,MAAkBC,GAAlB,MAAqCC,GAArC,MAEMC,GAAc,mBAEPC,GAAWpO,YAAagO,IAAW,SAACrC,GAAD,OAAQA,KAC3C0C,GAAarO,YAAamO,IAEjCG,GAAe5N,GAAkBsN,IpBRf,SAACrC,GAAD,OAAQnM,EAAOsC,IAAP,qBAAyB6J,OoBSlD,SAAUoC,KAAV,iEACH,OADG,SACGzL,YAAW0L,GAAWM,IADzB,wCAIP,I,wBAAMlH,GAAe,CACjBxH,KAAM,KACNuB,MAAO,MAkBIvB,GAfFQ,aAAa,kBAAC,GAElB6N,IAAoB,SAAC5N,EAAD,OAAmBT,EAAnB,EAAUW,QAAV,mBAAC,eACfF,GADc,IAEjBT,YAJc,YAAC,GAMlBsO,IAAoB,SAAC7N,EAAD,OAAmBc,EAAnB,EAAUZ,QAAV,mBAAC,eACfF,GADc,IAEjBc,aARc,YAAC,GAUlBgN,IAAc,kBAAM/G,MAVH,IAYtBA,IC7BEmH,GAAkB3Q,YAAOE,EAAPF,CAAH,qDAGf4Q,GAAW5Q,IAAOC,IAAV,+MACiBI,EAAQC,KAAK,IAmCtCuQ,GAAc7Q,IAAOC,IAAV,yEAEJI,EAAQC,KAAK,IA2CXwQ,GAxCI,SAAC,GAA6C,IAA3C9O,EAA0C,EAA1CA,KAAMuB,EAAoC,EAApCA,MAAOhB,EAA6B,EAA7BA,QAASwO,EAAoB,EAApBA,cAExC,GAAIxN,EACA,OAAIA,EAAMH,UAAsC,MAA1BG,EAAMH,SAASmI,OAE7B,cAACoF,GAAD,0FAGD,cAACA,GAAD,yCAIX,GAAIpO,IAAYP,EACZ,OAAO,KAEX,IAAQ+D,EAA2C/D,EAA3C+D,MAAOC,EAAoChE,EAApCgE,KAAMzE,EAA8BS,EAA9BT,KAAM4D,EAAwBnD,EAAxBmD,cAAeK,EAASxD,EAATwD,KAC1C,OACI,eAACmL,GAAD,WACI,cAAC,KAAD,UACI,kCAAQ5K,EAAR,mBAEJ,eAAC6K,GAAD,WACI,6BAAK7K,IACL,cAAC,GAAD,CACIrE,SAAUH,EAAKG,SACfyD,cAAeA,EACfF,cAAY,IAEhB,cAAC,GAAD,CAAMO,KAAMA,OAEfuL,EACD,cAACF,GAAD,CACIG,wBAAyB,CACrBC,OAAQjL,SCjFtBkL,GAAalR,IAAOC,IAAV,wPAYVkR,GAAgBnR,IAAOC,IAAV,mXAmBbW,GAAeZ,YAAOgB,EAAPhB,CAAH,oGAiCHoR,GA1BE,SAAC,GAQX,IAPHC,EAOE,EAPFA,QACAtL,EAME,EANFA,MACAuL,EAKE,EALFA,YAKE,IAJFC,mBAIE,MAJY,eAIZ,MAHFC,kBAGE,MAHW,eAGX,EAFFC,EAEE,EAFFA,UACA3B,EACE,EADFA,SAEA,OAAKuB,EAED,cAACH,GAAD,UACI,eAACC,GAAD,WACI,6BAAKpL,IACL,4BAAIuL,IACJ,sBAAK7P,UAAU,UAAf,UACI,cAAC,GAAD,CAAcE,QAASmO,EAAvB,SAAkC0B,IAClC,cAAC,GAAD,CAAcjR,MAAI,EAACoB,QAAS8P,EAA5B,SACKF,YATA,MCnCVG,GAbQ,SAAC,GAAsC,IAApCL,EAAmC,EAAnCA,QAASI,EAA0B,EAA1BA,UAAW3B,EAAe,EAAfA,SAC1C,OACI,cAAC,GAAD,CACIuB,QAASA,EACTtL,MAAM,kCACNuL,YAAY,0FACZC,YAAY,eACZE,UAAWA,EACX3B,SAAUA,KCLhB6B,GAAyB3R,IAAOC,IAAV,sIAOtB2R,GAAe5R,IAAOa,OAAV,4UAGLR,EAAQC,KAAK,GAOJD,EAAQC,KAAK,GAClBD,EAAQE,KAAK,IAmCfsR,GA5BW,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,OAAQ/C,EAAe,EAAfA,SACjC,EAA0BhE,qBAAS,GAAnC,mBAAOgH,EAAP,KAAcC,EAAd,KAYA,OACI,qCACI,eAACL,GAAD,WACI,cAACC,GAAD,CAAcjQ,QAASmQ,EAAvB,0BACA,cAACF,GAAD,CAAcjQ,QAfJ,WAClBqQ,GAAS,IAcD,6BAEJ,cAAC,GAAD,CACIX,QAASU,EACTN,UAbM,WACdO,GAAS,GACTjD,KAYQe,SAjBK,WACbkC,GAAS,UCwBF9K,gBAnDa,SAAC,GAAwB,IAAtBE,EAAqB,EAArBA,MAAO0D,EAAc,EAAdA,QAE1BmH,EAAW7K,EAAME,OAAjB2K,OACFnN,EAAWC,cACjB,EAAuCF,aACnC,gBAAG7C,EAAH,EAAGA,KAAMO,EAAT,EAASA,QAAShB,EAAlB,EAAkBA,KAAlB,MAA8B,CAC1BS,KAAMA,EAAKA,KACXuB,MAAOvB,EAAKuB,MACZhB,QAASA,EAAQ,kBACjBhB,KAAMA,EAAKA,SALXS,EAAR,EAAQA,KAAMuB,EAAd,EAAcA,MAAOhB,EAArB,EAAqBA,QAAShB,EAA9B,EAA8BA,KAS9B8F,sBAAU,WAGN,OAFAvC,EAAS0L,GAASyB,IAEX,WACHnN,EAAS2L,SAEd,CAAC3L,EAAUmN,IAEd,IAKMlD,EAAQ,wCAAG,sBAAAmD,EAAA,+EzBXMnE,EyBaEkE,EzBbKrQ,EAAOuQ,OAAP,qBAA4BpE,IyBWzC,OAGTjD,EAAQG,KAAK,KAHJ,+CAKT1G,QAAQC,IAAR,MALS,iCzBXK,IAACuJ,IyBWN,oBAAH,qDASRqE,GAAW7Q,GAAQA,EAAK0E,QAAUjE,GAAQA,EAAKT,KAAK0E,KAE1D,OACI,cAAC,GAAD,CACIjE,KAAMA,EACNO,QAASA,EACTgB,MAAOA,EACPwN,cACIqB,GACI,cAAC,GAAD,CAAmBN,OAvBpB,WACXhN,EAAS+I,GAAgB7L,IACzB8I,EAAQG,KAAK,WAqBkC8D,SAAUA,SCzClDsD,GATE,WACb,OACI,qCACI,cAAC,GAAD,IACA,cAAC,GAAD,QCgBGC,GAfH,WACR,OACI,qCACI,cAAC,KAAD,UACI,+CAEJ,cAAC,IAAD,CAAOC,UAAWtK,GAAcuK,KAAM,CAAC,cAAe,KAAMC,OAAK,IACjE,cAAC,IAAD,CAAOF,UAAWjH,GAAWkH,KAAK,WAClC,cAAC,IAAD,CAAOD,UAAW9G,GAAc+G,KAAK,cACrC,cAAC,IAAD,CAAOD,UAAWrC,GAAWsC,KAAK,WAClC,cAAC,IAAD,CAAOD,UAAWF,GAAUG,KAAK,4B,uCCA5BE,IAAV,SAAUA,KAAV,iEACH,OADG,SACGC,YAAI,CAACtK,KAAY5E,KAAYyJ,KAAaiD,KAAY9J,OADzD,wCAIQuM,OAbKC,2BAAgB,CAChCnJ,QACAnH,UACAhB,QACA8M,SACArM,QACAmE,WCHE2M,GAAiBC,eACjBC,GAAQC,uBACVL,GACAM,+BAAoBC,2BAAgBL,MAcxCA,GAAeM,IAAIV,IAXnB,WACI,IACI,IAAMnR,EAAO6C,aAAaiP,QAAQ,QAClC,IAAK9R,EAAM,OAEXyR,GAAMlO,SAASf,GAAYoH,KAAK5D,MAAMhG,KACtCyR,GAAMlO,SAASd,MACjB,MAAOM,GACLC,QAAQC,IAAI,gCAIpB8O,GAEAC,IAASC,OACL,cAAC,IAAD,CAAUR,MAAOA,GAAjB,SACI,cAAC,IAAD,UACI,cAAC,KAAD,UACI,cAAC,GAAD,UAKZS,SAASC,eAAe,U","file":"static/js/main.b1235589.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nconst ResponsiveBlock = styled.div`\r\n    padding-left: 1rem;\r\n    padding-right: 1rem;\r\n    width: 1024px;\r\n    margin: 0 auto; /* 중앙 정렬 */\r\n\r\n    /* 브라우저 크기에 따라 가로 크기 변경 */\r\n    @media (max-width: 1024px) {\r\n        width: 768px;\r\n    }\r\n    @media (max-width: 768px) {\r\n        width: 100%;\r\n    }\r\n`;\r\n\r\nconst Responsive = ({ children, ...rest }) => {\r\n    // style, className, onClick, onMouseMove 등의 props를 사용할 수 있도록\r\n    // ...rest를 사용하여 ResponsiveBlock에게 전달\r\n    return <ResponsiveBlock {...rest}>{children}</ResponsiveBlock>;\r\n};\r\n\r\nexport default Responsive;\r\n","// source: https://yeun.github.io/open-color/\r\n\r\nconst palette = {\r\n    gray: [\r\n        '#f8f9fa',\r\n        '#f1f3f5',\r\n        '#e9ecef',\r\n        '#dee2e6',\r\n        '#ced4da',\r\n        '#adb5bd',\r\n        '#868e96',\r\n        '#495057',\r\n        '#343a40',\r\n        '#212529',\r\n    ],\r\n    cyan: [\r\n        '#e3fafc',\r\n        '#c5f6fa',\r\n        '#99e9f2',\r\n        '#66d9e8',\r\n        '#3bc9db',\r\n        '#22b8cf',\r\n        '#15aabf',\r\n        '#1098ad',\r\n        '#0c8599',\r\n        '#0b7285',\r\n    ],\r\n};\r\n\r\nexport default palette;\r\n","import styled, { css } from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport palette from '../../lib/styles/palette';\r\n\r\nconst buttonStyle = css`\r\n    border: none;\r\n    border-radius: 4px;\r\n    font-size: 1rem;\r\n    font-weight: bold;\r\n    padding: 0.25rem 1rem;\r\n    color: white;\r\n    outline: none;\r\n    cursor: pointer;\r\n\r\n    background: ${palette.gray[8]};\r\n    &:hover {\r\n        background: ${palette.gray[6]};\r\n    }\r\n\r\n    ${(props) =>\r\n        props.fullWidth &&\r\n        css`\r\n            padding-top: 0.75rem;\r\n            padding-bottom: 0.75rem;\r\n            width: 100%;\r\n            font-size: 1.125rem;\r\n        `}\r\n\r\n    ${(props) =>\r\n        props.cyan &&\r\n        css`\r\n            background: ${palette.cyan[5]};\r\n            &:hover {\r\n                background: ${palette.cyan[4]};\r\n            }\r\n        `}\r\n\r\n    &:disabled {\r\n        background: ${palette.gray[3]};\r\n        color: ${palette.gray[5]};\r\n        cursor: not-allowed;\r\n    }\r\n`;\r\n\r\nconst StyledButton = styled.button`\r\n    ${buttonStyle}\r\n`;\r\n\r\nconst StyledLink = styled(Link)`\r\n    ${buttonStyle}\r\n`;\r\n\r\nconst Button = (props) => {\r\n    // const onClick = (e) => {\r\n    //     // to가 있다면 to로 페이지 이동\r\n    //     if (to) {\r\n    //         history.push(to);\r\n    //     }\r\n    //     if (rest.onClick) {\r\n    //         rest.onClick(e);\r\n    //     }\r\n    // };\r\n    return props.to ? (\r\n        <StyledLink {...props} cyan={props.cyan ? 1 : 0} />\r\n    ) : (\r\n        <StyledButton {...props} />\r\n    );\r\n};\r\n\r\nexport default Button;\r\n","import styled from 'styled-components';\r\nimport Responsive from './Responsive';\r\nimport Button from './Button';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst HeaderBlock = styled.div`\r\n    position: fixed;\r\n    width: 100%;\r\n    background: white;\r\n    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.08);\r\n`;\r\n\r\n/**\r\n * Responsive 컴포넌트의 속성에 스타일을 추가해서 새로운 컴포넌트 생성\r\n */\r\nconst Wrapper = styled(Responsive)`\r\n    height: 4rem;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between; /* 자식 엘리먼트 사이의 여백을 최대로 설정 */\r\n    .logo {\r\n        font-size: 1.125rem;\r\n        font-weight: 800;\r\n        letter-spacing: 2px;\r\n    }\r\n    .right {\r\n        display: flex;\r\n        align-items: center;\r\n    }\r\n`;\r\n\r\n/**\r\n * 헤더가 fixed로 되어 있기 때문에 페이지의 콘텐츠가 4rem 아래에 나타나도록 해 주는 컴포넌트\r\n */\r\nconst Spacer = styled.div`\r\n    height: 4rem;\r\n`;\r\n\r\nconst UserInfo = styled.div`\r\n    font-weight: 800;\r\n    margin-right: 1rem;\r\n`;\r\n\r\nconst Header = ({ user, onLogout }) => {\r\n    return (\r\n        <>\r\n            <HeaderBlock>\r\n                <Wrapper>\r\n                    <Link to=\"/\" className=\"logo\">\r\n                        REACTERS\r\n                    </Link>\r\n                    {user ? (\r\n                        <div className=\"right\">\r\n                            <UserInfo>{user.username}</UserInfo>\r\n                            <Button onClick={onLogout}>로그아웃</Button>\r\n                        </div>\r\n                    ) : (\r\n                        <div className=\"right\">\r\n                            <Button to=\"/login\">로그인</Button>\r\n                        </div>\r\n                    )}\r\n                </Wrapper>\r\n            </HeaderBlock>\r\n            <Spacer />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import axios from 'axios';\r\n\r\nconst client = axios.create();\r\n\r\n/*\r\n    글로벌 설정 예시:\r\n    // API 주소를 다른 곳으로 사용함\r\n    client.defaults.baseURL = 'https://external-api-sever.com/'\r\n\r\n    // 헤더 설정\r\n    client.defaults.headers.common['Authorization'] = 'Bearer a1b2c3d4';\r\n\r\n    // 인터셉터 설정\r\n    axios.intercepter.response.use(\\\r\n        response => {\r\n            // 요청 성공 시 특정 작업 수행\r\n            return response;\r\n        },\r\n        error => {\r\n            // 요청 실패 시 특정 작업 수행\r\n            return Promise.reject(error);\r\n        })\r\n*/\r\n\r\nexport default client;\r\n","import client from './client';\r\n\r\n// 로그인\r\nexport const login = ({ username, password }) =>\r\n    client.post('/api/auth/login', { username, password });\r\n\r\n// 회원가입\r\nexport const register = ({ username, password }) =>\r\n    client.post('/api/auth/register', { username, password });\r\n\r\n// 로그인 상태 확인\r\nexport const check = () => client.get('/api/auth/check');\r\n\r\n// 로그아웃\r\nexport const logout = () => client.post('/api/auth/logout');\r\n","import { createAction, handleActions } from 'redux-actions';\r\n\r\nconst START_LOADING = 'loading/START_LOADING';\r\nconst FINISH_LOADING = 'loading/FINISH_LOADING';\r\n\r\n/*\r\n    요청을 위한 액션 타입을 payload로 설정합니다 (예: \"sample/GET_POST\")\r\n*/\r\n\r\nexport const startLoading = createAction(\r\n    START_LOADING,\r\n    (requestType) => requestType,\r\n);\r\n\r\nexport const finishLoading = createAction(\r\n    FINISH_LOADING,\r\n    (requestType) => requestType,\r\n);\r\n\r\nconst initialState = {};\r\n\r\nconst loading = handleActions(\r\n    {\r\n        [START_LOADING]: (state, action) => ({\r\n            ...state,\r\n            [action.payload]: true,\r\n        }),\r\n        [FINISH_LOADING]: (state, action) => ({\r\n            ...state,\r\n            [action.payload]: false,\r\n        }),\r\n    },\r\n    initialState,\r\n);\r\n\r\nexport default loading;\r\n","import { call, put } from 'redux-saga/effects';\r\nimport { startLoading, finishLoading } from '../modules/loading';\r\n\r\nexport const createRequestActionTypes = (type) => {\r\n    const SUCCESS = `${type}_SUCCESS`;\r\n    const FAILURE = `${type}_FAILURE`;\r\n    return [type, SUCCESS, FAILURE];\r\n};\r\n\r\nexport default function createRequestSaga(type, request) {\r\n    const SUCCESS = `${type}_SUCCESS`;\r\n    const FAILURE = `${type}_FAILURE`;\r\n\r\n    return function* (action) {\r\n        yield put(startLoading(type)); // 로딩 시작\r\n        try {\r\n            const response = yield call(request, action.payload);\r\n            yield put({\r\n                type: SUCCESS,\r\n                payload: response.data,\r\n                meta: response,\r\n            });\r\n        } catch (e) {\r\n            yield put({\r\n                type: FAILURE,\r\n                payload: e,\r\n                error: true,\r\n            });\r\n        }\r\n        yield put(finishLoading(type)); // 로딩 끝\r\n    };\r\n}\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport { takeLatest, call } from 'redux-saga/effects';\r\nimport * as authAPI from '../lib/api/auth';\r\nimport createRequestSaga, {\r\n    createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\n\r\nconst TEMP_SET_USER = 'user/TEMP_SET_USER'; // 새로고침 이후 임시 로그인 처리\r\n// 회원 정보 확인\r\nconst [CHECK, CHECK_SUCCESS, CHECK_FAILURE] =\r\n    createRequestActionTypes('user/CHECK');\r\n\r\nconst LOGOUT = 'user/LOGOUT';\r\n\r\nexport const tempSetUser = createAction(TEMP_SET_USER, (user) => user);\r\nexport const check = createAction(CHECK);\r\nexport const logout = createAction(LOGOUT);\r\n\r\nconst checkSaga = createRequestSaga(CHECK, authAPI.check);\r\n\r\nfunction checkFailureSaga() {\r\n    try {\r\n        localStorage.removeItem('user'); // localStorage에서 user를 제거\r\n    } catch (e) {\r\n        console.log('localStorage is not working');\r\n    }\r\n}\r\n\r\nfunction* logoutSaga() {\r\n    try {\r\n        yield call(authAPI.logout); //logout API 호출\r\n        localStorage.removeItem('user'); // localStorage에서 user를 제거\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n}\r\nexport function* userSaga() {\r\n    yield takeLatest(CHECK, checkSaga);\r\n    yield takeLatest(CHECK_FAILURE, checkFailureSaga);\r\n    yield takeLatest(LOGOUT, logoutSaga);\r\n}\r\n\r\nconst initialState = {\r\n    user: null,\r\n    checkError: null,\r\n};\r\n\r\nexport default handleActions(\r\n    {\r\n        [TEMP_SET_USER]: (state, { payload: user }) => ({\r\n            ...state,\r\n            user,\r\n        }),\r\n        [CHECK_SUCCESS]: (state, { payload: user }) => ({\r\n            ...state,\r\n            user,\r\n            checkError: null,\r\n        }),\r\n        [CHECK_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            user: null,\r\n            checkError: error,\r\n        }),\r\n        [LOGOUT]: (state) => ({\r\n            ...state,\r\n            user: null,\r\n        }),\r\n    },\r\n    initialState,\r\n);\r\n","import { useSelector, useDispatch } from 'react-redux';\r\nimport Header from '../../components/common/Header';\r\nimport { logout } from '../../modules/user';\r\n\r\nconst HeaderContainer = () => {\r\n    const { user } = useSelector(({ user }) => ({ user: user.user }));\r\n    const dispatch = useDispatch();\r\n    const onLogout = () => {\r\n        dispatch(logout());\r\n    };\r\n    return <Header user={user} onLogout={onLogout} />;\r\n};\r\n\r\nexport default HeaderContainer;\r\n","import styled, { css } from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport palette from '../../lib/styles/palette';\r\n\r\nconst SubInfoBlock = styled.div`\r\n    ${(props) =>\r\n        props.hasMarginTop &&\r\n        css`\r\n            margin-top: 1rem;\r\n        `}\r\n    color: ${palette.gray[6]};\r\n\r\n    /* span 사이에 가운뎃점 문자 보여 주기 */\r\n    span + span:before {\r\n        color: ${palette.gray[4]};\r\n        padding-left: 0.25rem;\r\n        padding-right: 0.25rem;\r\n        content: '\\\\B7'; /* 가운뎃 점 문자 */\r\n    }\r\n`;\r\n\r\nconst SubInfo = ({ username, publishedDate, hasMarginTop }) => {\r\n    return (\r\n        <SubInfoBlock hasMarginTop={hasMarginTop}>\r\n            <span>\r\n                <b>\r\n                    <Link to={`/@${username}`}>{username}</Link>\r\n                </b>\r\n            </span>\r\n            <span>{new Date(publishedDate).toLocaleDateString()}</span>\r\n        </SubInfoBlock>\r\n    );\r\n};\r\n\r\nexport default SubInfo;\r\n","import styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport palette from '../../lib/styles/palette';\r\n\r\nconst TagsBlock = styled.div`\r\n    margin-top: 0.5rem;\r\n    .tag {\r\n        display: inline-block;\r\n        color: ${palette.cyan[7]};\r\n        text-decoration: none;\r\n        margin-right: 0.5rem;\r\n        &:hover {\r\n            color: ${palette.cyan[6]};\r\n        }\r\n    }\r\n`;\r\n\r\nconst Tags = ({ tags }) => {\r\n    return (\r\n        <TagsBlock>\r\n            {tags.map((tag) => (\r\n                <Link className=\"tag\" to={`/?tag=${tag}`} key={tag}>\r\n                    #{tag}\r\n                </Link>\r\n            ))}\r\n        </TagsBlock>\r\n    );\r\n};\r\n\r\nexport default Tags;\r\n","import styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport Responsive from '../common/Responsive';\r\nimport Button from '../common/Button';\r\nimport palette from '../../lib/styles/palette';\r\nimport SubInfo from '../common/SubInfo';\r\nimport Tags from '../common/Tags';\r\n\r\nconst PostListBlock = styled(Responsive)`\r\n    margin-top: 3rem;\r\n`;\r\n\r\nconst WritePostButtonWrapper = styled.div`\r\n    display: flex;\r\n    justify-content: flex-end; /* 오른쪽 끝부분에서 flex로 붙임 */\r\n    margin-bottom: 3rem;\r\n`;\r\n\r\nconst PostItemBlock = styled.div`\r\n    padding-top: 3rem;\r\n    padding-bottom: 3rem;\r\n    /* 맨 위 포스트는 padding-top 없음 */\r\n    &:first-child {\r\n        padding-top: 0;\r\n    }\r\n    & + & {\r\n        border-top: 1px solid ${palette.gray[2]};\r\n    }\r\n\r\n    h2 {\r\n        font-size: 2rem;\r\n        margin-bottom: 0;\r\n        margin-top: 0;\r\n        &:hover {\r\n            color: ${palette.gray[6]};\r\n        }\r\n    }\r\n    p {\r\n        margin-top: 2rem;\r\n    }\r\n`;\r\n\r\n// const SubInfo = styled.div`\r\n//     /* margin-top: 1rem; */\r\n//     color: ${palette.gray[6]};\r\n\r\n//     /* span 사이에 가웃뎃점 문자 보여주기 */\r\n//     span + span:before {\r\n//         color: ${palette.gray[4]};\r\n//         padding-left: 0.25rem;\r\n//         padding-right: 0.25rem;\r\n//         content: '\\\\B7'; /* 가운뎃점 문자 */\r\n//     }\r\n// `;\r\n\r\n// const Tags = styled.div`\r\n//     margin-top: 0.5rem;\r\n//     .tag {\r\n//         display: inline-block;\r\n//         color: ${palette.cyan[7]};\r\n//         text-decoration: none;\r\n//         margin-right: 0.5rem;\r\n//         &:hover {\r\n//             color: ${palette.cyan[6]};\r\n//         }\r\n//     }\r\n// `;\r\n\r\nconst PostItem = ({ post }) => {\r\n    const { publishedDate, user, tags, title, body, _id } = post;\r\n    return (\r\n        <PostItemBlock>\r\n            <h2>\r\n                <Link to={`/@${user.username}/${_id}`}>{title}</Link>\r\n            </h2>\r\n            <SubInfo\r\n                username={user.username}\r\n                publishedDate={new Date(publishedDate)}\r\n            />\r\n            <Tags tags={tags} />\r\n            <p>{body}</p>\r\n        </PostItemBlock>\r\n    );\r\n};\r\n\r\nconst PostList = ({ posts, loading, error, showWriteButton }) => {\r\n    // 에러 발생 시\r\n    if (error) {\r\n        return <PostListBlock>에러가 발생했습니다.</PostListBlock>;\r\n    }\r\n    return (\r\n        <PostListBlock>\r\n            <WritePostButtonWrapper>\r\n                {showWriteButton && (\r\n                    <Button cyan to=\"/write\">\r\n                        새 글 작성하기\r\n                    </Button>\r\n                )}\r\n            </WritePostButtonWrapper>\r\n            {/* 로딩 중이 아니고, 포스트 배열이 존재할 때만 보여줌 */}\r\n            {!loading && posts && (\r\n                <div>\r\n                    {posts.map((post) => (\r\n                        <PostItem post={post} key={post._id} />\r\n                    ))}\r\n                </div>\r\n            )}\r\n        </PostListBlock>\r\n    );\r\n};\r\n\r\nexport default PostList;\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n    createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\nconst [LIST_POSTS, LIST_POSTS_SUCCESS, LIST_POSTS_FAILURE] =\r\n    createRequestActionTypes('posts/LIST_POSTS');\r\n\r\nexport const listPosts = createAction(\r\n    LIST_POSTS,\r\n    ({ tag, username, page }) => ({ tag, username, page }),\r\n);\r\n\r\nconst listPostsSaga = createRequestSaga(LIST_POSTS, postsAPI.listPosts);\r\nexport function* postsSaga() {\r\n    yield takeLatest(LIST_POSTS, listPostsSaga);\r\n}\r\n\r\nconst initialState = {\r\n    posts: null,\r\n    error: null,\r\n    lastPage: 1,\r\n};\r\n\r\nconst posts = handleActions(\r\n    {\r\n        [LIST_POSTS_SUCCESS]: (state, { payload: posts, meta: response }) => ({\r\n            ...state,\r\n            posts,\r\n            lastPage: parseInt(response.headers['last-page'], 10), // 문자열을 숫자로 변환\r\n        }),\r\n        [LIST_POSTS_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            error,\r\n        }),\r\n    },\r\n    initialState,\r\n);\r\n\r\nexport default posts;\r\n","import qs from 'qs';\r\nimport client from './client';\r\n\r\nexport const writePost = ({ title, body, tags }) =>\r\n    client.post('/api/posts', { title, body, tags });\r\n\r\nexport const readPost = (id) => client.get(`/api/posts/${id}`);\r\n\r\nexport const listPosts = ({ page, username, tag }) => {\r\n    const queryString = qs.stringify({\r\n        page,\r\n        username,\r\n        tag,\r\n    });\r\n    return client.get(`/api/posts?${queryString}`);\r\n};\r\n\r\nexport const updatePost = ({ id, title, body, tags }) =>\r\n    client.patch(`/api/posts/${id}`, {\r\n        title,\r\n        body,\r\n        tags,\r\n    });\r\n\r\nexport const removePost = (id) => client.delete(`/api/posts/${id}`);\r\n","import { useEffect } from 'react';\r\nimport qs from 'qs';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PostList from '../../components/posts/PostList';\r\nimport { listPosts } from '../../modules/posts';\r\n\r\nconst PostListContainer = ({ location, match }) => {\r\n    const dispatch = useDispatch();\r\n    const { posts, error, loading, user } = useSelector(\r\n        ({ posts, loading, user }) => ({\r\n            posts: posts.posts,\r\n            error: posts.error,\r\n            loading: loading['posts/LIST_POSTS'],\r\n            user: user.user,\r\n        }),\r\n    );\r\n    useEffect(() => {\r\n        const { username } = match.params;\r\n        const { tag, page } = qs.parse(location.search, {\r\n            ignoreQueryPrefix: true,\r\n        });\r\n        dispatch(listPosts({ tag, username, page }));\r\n    }, [dispatch, location.search, match.params]);\r\n\r\n    return (\r\n        <PostList\r\n            loading={loading}\r\n            error={error}\r\n            posts={posts}\r\n            showWriteButton={user}\r\n        />\r\n    );\r\n};\r\n\r\nexport default withRouter(PostListContainer);\r\n","import styled from 'styled-components';\r\nimport qs from 'qs';\r\nimport Button from '../common/Button';\r\n\r\nconst PaginationBlock = styled.div`\r\n    width: 320px;\r\n    margin: 0 auto;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    margin-bottom: 3rem;\r\n`;\r\nconst PageNumber = styled.div``;\r\n\r\nconst buildLink = ({ username, tag, page }) => {\r\n    const query = qs.stringify({ tag, page });\r\n    return username ? `/@${username}?${query}` : `/?${query}`;\r\n};\r\n\r\nconst Pagination = ({ page, lastPage, username, tag }) => {\r\n    return (\r\n        <PaginationBlock>\r\n            <Button\r\n                disabled={page === 1}\r\n                to={\r\n                    page === 1\r\n                        ? undefined\r\n                        : buildLink({ username, tag, page: page - 1 })\r\n                }\r\n            >\r\n                이전\r\n            </Button>\r\n            <PageNumber>{page}</PageNumber>\r\n            <Button\r\n                disabled={page === lastPage}\r\n                to={\r\n                    page === lastPage\r\n                        ? undefined\r\n                        : buildLink({ username, tag, page: page + 1 })\r\n                }\r\n            >\r\n                다음\r\n            </Button>\r\n        </PaginationBlock>\r\n    );\r\n};\r\n\r\nexport default Pagination;\r\n","import Pagination from '../../components/posts/Pagination';\r\nimport { useSelector } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport qs from 'qs';\r\n\r\nconst PaginationContainer = ({ location, match }) => {\r\n    const { lastPage, posts, loading } = useSelector(({ posts, loading }) => ({\r\n        lastPage: posts.lastPage,\r\n        posts: posts.posts,\r\n        loading: loading['posts/LIST_POSTS'],\r\n    }));\r\n\r\n    // 포스트 데이터가 없거나 로딩 중이면 아무것도 보여주지 않음\r\n    if (!posts || loading) return null;\r\n\r\n    const { username } = match.params;\r\n    // page가 없으면 1을 기본값으로 사용\r\n    const { tag, page = 1 } = qs.parse(location.search, {\r\n        ignoreQueryPrefix: true,\r\n    });\r\n\r\n    return (\r\n        <Pagination\r\n            tag={tag}\r\n            username={username}\r\n            page={parseInt(page, 10)}\r\n            lastPage={lastPage}\r\n        />\r\n    );\r\n};\r\n\r\nexport default withRouter(PaginationContainer);\r\n","import HeaderContainer from '../containers/common/HeaderContainer';\r\nimport PostListContainer from '../containers/posts/PostListContainer';\r\nimport PaginationContainer from '../containers/posts/PaginationContainer';\r\n\r\nconst PostListPage = () => {\r\n    return (\r\n        <>\r\n            <HeaderContainer />\r\n            <PostListContainer />\r\n            <PaginationContainer />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PostListPage;\r\n","import styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport { Link } from 'react-router-dom';\r\n\r\n/**\r\n * 회원가입/로그인 페이지의 레이아웃을 담당하는 컴포넌트 입니다.\r\n */\r\n\r\n/* 화면 전체를 채움 */\r\nconst AuthTemplateBlock = styled.div`\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    bottom: 0;\r\n    right: 0;\r\n    background: ${palette.gray[2]};\r\n    /* flex로 내부 내용 중앙 정렬 */\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n`;\r\n\r\n/* 흰색 박스 */\r\nconst WhiteBox = styled.div`\r\n    .logo-area {\r\n        display: block;\r\n        padding-bottom: 2rem;\r\n        text-align: center;\r\n        font-weight: bold;\r\n        letter-spacing: 2px;\r\n    }\r\n    box-shadow: 0 0 8px rgba(0, 0, 0, 0.025);\r\n    padding: 2rem;\r\n    width: 360px;\r\n    background: white;\r\n    border-radius: 2px;\r\n`;\r\n\r\nconst AuthTemplate = ({ children }) => {\r\n    return (\r\n        <AuthTemplateBlock>\r\n            <WhiteBox>\r\n                <div className=\"logo-area\">\r\n                    <Link to=\"/\">REACTERS</Link>\r\n                </div>\r\n                {children}\r\n            </WhiteBox>\r\n        </AuthTemplateBlock>\r\n    );\r\n};\r\n\r\nexport default AuthTemplate;\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport produce from 'immer';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport createRequestSaga, {\r\n    createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as authAPI from '../lib/api/auth';\r\n\r\n// 액션 타입 정의\r\n// 액션 타입은 주로 대문자로 작성합니다.\r\nconst CHANGE_FIELD = 'auth/CHANGE_FIELD';\r\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM';\r\n\r\n// const REGISTER = 'auth/REGISTER';\r\n// const REGISTER_SUCCESS = 'auth/REGISTER_SUCCESS';\r\n// const REGISTER_FAILURE = 'auth/REGISTER_FAILURE';\r\n\r\n// const LOGIN = 'auth/LOGIN';\r\n// const LOGIN_SUCCESS = 'auth/LOGIN_SUCCESS';\r\n// const LOGIN_FAILURE = 'auth/LOGIN_FAILURE';\r\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] =\r\n    createRequestActionTypes('auth/REGISTER');\r\n\r\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] =\r\n    createRequestActionTypes('auth/LOGIN');\r\n// 액션 생성함수 정의\r\n// 액션 생성함수는 주로 camelCase로 작성합니다.\r\nexport const changeField = createAction(\r\n    CHANGE_FIELD,\r\n    ({ form, key, value }) => ({\r\n        form, // register, login\r\n        key, // username, password, passwordConfirm,\r\n        value, // 실제 바꾸려는 값\r\n    }),\r\n);\r\nexport const initializeForm = createAction(INITIALIZE_FORM, (form) => form); //register / login\r\n\r\nexport const register = createAction(REGISTER, ({ username, password }) => ({\r\n    username,\r\n    password,\r\n}));\r\nexport const login = createAction(LOGIN, ({ username, password }) => ({\r\n    username,\r\n    password,\r\n}));\r\n\r\n// 사가 생성\r\nconst registerSaga = createRequestSaga(REGISTER, authAPI.register);\r\nconst loginSaga = createRequestSaga(LOGIN, authAPI.login);\r\nexport function* authSaga() {\r\n    yield takeLatest(REGISTER, registerSaga);\r\n    yield takeLatest(LOGIN, loginSaga);\r\n}\r\n// 리덕스에서 관리 할 상태 정의\r\nconst initialState = {\r\n    register: {\r\n        username: '',\r\n        password: '',\r\n        passwordConfirm: '',\r\n    },\r\n    login: {\r\n        username: '',\r\n        password: '',\r\n    },\r\n    auth: null,\r\n    authError: null,\r\n};\r\n\r\n/* 리듀서 만들기 */\r\n// 위 액션 생성함수들을 통해 만들어진 객체들을 참조하여\r\n// 새로운 상태를 만드는 함수를 만들어봅시다.\r\n// 주의: 리듀서에서는 불변성을 꼭 지켜줘야 합니다!\r\nconst auth = handleActions(\r\n    {\r\n        [CHANGE_FIELD]: (state, { payload: { form, key, value } }) =>\r\n            produce(state, (draft) => {\r\n                //immer 를 이용해 불변성 유지\r\n                draft[form][key] = value; // 예: state.register.username을 바꾼다\r\n            }),\r\n        [INITIALIZE_FORM]: (state, { payload: form }) => ({\r\n            ...state,\r\n            [form]: initialState[form],\r\n            authError: null, // 폼 전환 시 회원 인증 에러 초기화\r\n        }),\r\n        // 회원가입 성공\r\n        [REGISTER_SUCCESS]: (state, { payload: auth }) => ({\r\n            ...state,\r\n            authError: null,\r\n            auth,\r\n        }),\r\n        // 회원가입 실패\r\n        [REGISTER_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            authError: error,\r\n        }),\r\n        // 로그인 성공\r\n        [LOGIN_SUCCESS]: (state, { payload: auth }) => ({\r\n            ...state,\r\n            authError: null,\r\n            auth,\r\n        }),\r\n        // 로그인 실패\r\n        [LOGIN_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            authError: error,\r\n        }),\r\n    },\r\n    initialState,\r\n);\r\n\r\nexport default auth;\r\n","import styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport palette from '../../lib/styles/palette';\r\nimport Button from '../common/Button';\r\n\r\n/**\r\n * 회원가입 또는 로그인 폼을 보여 줍니다.\r\n */\r\n\r\nconst AuthFormBlock = styled.div`\r\n    h3 {\r\n        margin: 0;\r\n        color: ${palette.gray[8]};\r\n        margin-bottom: 1rem;\r\n    }\r\n`;\r\n\r\n/**\r\n * 스타일링된 input\r\n */\r\nconst StyledInput = styled.input`\r\n    font-size: 1rem;\r\n    border: none;\r\n    border-bottom: 1px solid ${palette.gray[5]};\r\n    padding-bottom: 0.5rem;\r\n    outline: none;\r\n    width: 100%;\r\n    &:focus {\r\n        color: $oc-teal-7;\r\n        border-bottom: 1px solid ${palette.gray[7]};\r\n    }\r\n    & + & {\r\n        margin-top: 1rem;\r\n    }\r\n`;\r\n\r\n/**\r\n * 폼 하단에 로그인 혹은 회원가입 링크를 보여 줌\r\n */\r\nconst Footer = styled.div`\r\n    margin-top: 2rem;\r\n    text-align: right;\r\n    a {\r\n        color: ${palette.gray[6]};\r\n        text-decoration: underline;\r\n        &:hover {\r\n            color: ${palette.gray[9]};\r\n        }\r\n    }\r\n`;\r\n\r\nconst ButtonWithMarginTop = styled(Button)`\r\n    margin-top: 1rem;\r\n`;\r\n\r\nconst textMap = {\r\n    login: '로그인',\r\n    register: '회원가입',\r\n};\r\n\r\n/**\r\n * 에러를 보여 줍니다.\r\n */\r\nconst ErrorMessage = styled.div`\r\n    color: red;\r\n    text-align: center;\r\n    font-size: 0.875rem;\r\n    margin-top: 1rem;\r\n`;\r\n\r\nconst AuthForm = ({ type, form, onChange, onSubmit, error }) => {\r\n    const text = textMap[type];\r\n    return (\r\n        <AuthFormBlock>\r\n            <h3>{text}</h3>\r\n            <form onSubmit={onSubmit}>\r\n                <StyledInput\r\n                    autoComplete=\"username\"\r\n                    name=\"username\"\r\n                    placeholder=\"아이디\"\r\n                    onChange={onChange}\r\n                    value={form.username}\r\n                />\r\n                <StyledInput\r\n                    autoComplete=\"new-password\"\r\n                    name=\"password\"\r\n                    placeholder=\"비밀번호\"\r\n                    type=\"password\"\r\n                    onChange={onChange}\r\n                    value={form.password}\r\n                />\r\n                {type === 'register' && (\r\n                    <StyledInput\r\n                        autoComplete=\"new-password\"\r\n                        name=\"passwordConfirm\"\r\n                        placeholder=\"비밀번호 확인\"\r\n                        type=\"password\"\r\n                        onChange={onChange}\r\n                        value={form.passwordConfirm}\r\n                    />\r\n                )}\r\n                {error && <ErrorMessage>{error}</ErrorMessage>}\r\n                <ButtonWithMarginTop\r\n                    cyan\r\n                    fullWidth\r\n                    style={{ marginTop: '1rem' }}\r\n                >\r\n                    {text}\r\n                </ButtonWithMarginTop>\r\n            </form>\r\n            <Footer>\r\n                {type === 'login' ? (\r\n                    <Link to=\"/register\">회원가입</Link>\r\n                ) : (\r\n                    <Link to=\"/login\">로그인</Link>\r\n                )}\r\n            </Footer>\r\n        </AuthFormBlock>\r\n    );\r\n};\r\n\r\nexport default AuthForm;\r\n","import { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { changeField, initializeForm, login } from '../../modules/auth';\r\nimport AuthForm from '../../components/auth/AuthForm';\r\nimport { check } from '../../modules/user';\r\n\r\nconst LoginForm = ({ history }) => {\r\n    const [error, setError] = useState(null);\r\n\r\n    const dispatch = useDispatch();\r\n    const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\r\n        form: auth.login,\r\n        auth: auth.auth,\r\n        authError: auth.authError,\r\n        user: user.user,\r\n    }));\r\n    // 인풋 변경 이벤트 핸들러\r\n    const onChange = (e) => {\r\n        const { value, name } = e.target;\r\n        dispatch(\r\n            changeField({\r\n                form: 'login',\r\n                key: name,\r\n                value,\r\n            }),\r\n        );\r\n    };\r\n\r\n    // 폼 등록 이벤트 핸들러\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        const { username, password } = form;\r\n        dispatch(login({ username, password }));\r\n    };\r\n\r\n    // 컴포넌트가 처음 렌더링될 때 form을 초기화함\r\n    useEffect(() => {\r\n        dispatch(initializeForm('login'));\r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n        if (authError) {\r\n            console.log('오류 발생');\r\n            console.log(authError);\r\n            setError('로그인 실패');\r\n            return;\r\n        }\r\n        if (auth) {\r\n            console.log('로그인 성공');\r\n            dispatch(check());\r\n        }\r\n    }, [auth, authError, dispatch]);\r\n\r\n    useEffect(() => {\r\n        if (user) {\r\n            history.push('/');\r\n            try {\r\n                localStorage.setItem('user', JSON.stringify(user));\r\n            } catch (e) {\r\n                console.log('localStorage is not working');\r\n            }\r\n        }\r\n    }, [history, user]);\r\n\r\n    return (\r\n        <AuthForm\r\n            type=\"login\"\r\n            form={form}\r\n            onChange={onChange}\r\n            onSubmit={onSubmit}\r\n            error={error}\r\n        />\r\n    );\r\n};\r\n\r\nexport default withRouter(LoginForm);\r\n","import AuthTemplate from '../components/auth/AuthTemplate';\r\nimport LoginForm from '../containers/auth/LoginForm';\r\n\r\nconst LoginPage = () => {\r\n    return (\r\n        <AuthTemplate>\r\n            <LoginForm />\r\n        </AuthTemplate>\r\n    );\r\n};\r\n\r\nexport default LoginPage;\r\n","import { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changeField, initializeForm, register } from '../../modules/auth';\r\nimport AuthForm from '../../components/auth/AuthForm';\r\nimport { check } from '../../modules/user';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst RegisterForm = ({ history }) => {\r\n    const [error, setError] = useState(null);\r\n\r\n    const dispatch = useDispatch();\r\n    const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\r\n        form: auth.register,\r\n        auth: auth.auth,\r\n        authError: auth.authError,\r\n        user: user.user,\r\n    }));\r\n    // 인풋 변경 이벤트 핸들러\r\n    const onChange = (e) => {\r\n        const { value, name } = e.target;\r\n        dispatch(\r\n            changeField({\r\n                form: 'register',\r\n                key: name,\r\n                value,\r\n            }),\r\n        );\r\n    };\r\n\r\n    // 폼 등록 이벤트 핸들러\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        const { username, password, passwordConfirm } = form;\r\n        // 하나라도 비어 있다면\r\n        if ([username, password, passwordConfirm].includes('')) {\r\n            setError('빈 칸을 모두 입력하세요.');\r\n            return;\r\n        }\r\n        // 비밀번호가 일치하지 않는다면\r\n        if (password !== passwordConfirm) {\r\n            setError('비밀번호가 일치하지 않습니다.');\r\n            dispatch(\r\n                changeField({ form: 'register', key: 'password', value: '' }),\r\n            );\r\n            dispatch(\r\n                changeField({\r\n                    form: 'register',\r\n                    key: 'passwordConfirm',\r\n                    value: '',\r\n                }),\r\n            );\r\n            return;\r\n        }\r\n        dispatch(register({ username, password }));\r\n    };\r\n\r\n    // 컴포넌트가 처음 렌더링될 때 form을 초기화함\r\n    useEffect(() => {\r\n        dispatch(initializeForm('register'));\r\n    }, [dispatch]);\r\n\r\n    // 회원가입 성공/실패 처리\r\n    useEffect(() => {\r\n        if (authError) {\r\n            // 계정명이 이미 존재할 때\r\n            if (authError.response.status === 409) {\r\n                setError('이미 존재하는 계정명입니다.');\r\n                return;\r\n            }\r\n            // 기타 이유\r\n            setError('회원가입 실패');\r\n            return;\r\n        }\r\n\r\n        if (auth) {\r\n            console.log('회원가입 성공');\r\n            console.log(auth);\r\n            dispatch(check());\r\n        }\r\n    }, [auth, authError, dispatch]);\r\n\r\n    // user 값이 잘 설정되었는지 확인\r\n    useEffect(() => {\r\n        if (user) {\r\n            console.log('check API 성공');\r\n            console.log(user);\r\n            history.push('/'); // 홈 화면으로 이동\r\n            try {\r\n                localStorage.setItem('user', JSON.stringify(user));\r\n            } catch (e) {\r\n                console.log('localStorage is not working');\r\n            }\r\n        }\r\n    }, [history, user]);\r\n    return (\r\n        <AuthForm\r\n            type=\"register\"\r\n            form={form}\r\n            onChange={onChange}\r\n            onSubmit={onSubmit}\r\n            error={error}\r\n        />\r\n    );\r\n};\r\n\r\nexport default withRouter(RegisterForm);\r\n","import AuthTemplate from '../components/auth/AuthTemplate';\r\nimport RegisterForm from '../containers/auth/RegisterForm';\r\n\r\nconst RegisterPage = () => {\r\n    return (\r\n        <AuthTemplate>\r\n            <RegisterForm />\r\n        </AuthTemplate>\r\n    );\r\n};\r\n\r\nexport default RegisterPage;\r\n","import { useRef, useEffect } from 'react';\r\nimport Quill from 'quill';\r\nimport 'quill/dist/quill.bubble.css';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport Responsive from '../common/Responsive';\r\n\r\nconst EditorBlock = styled(Responsive)`\r\n    /* 페이지 위아래 여백 지정 */\r\n    padding-top: 5rem;\r\n    padding-bottom: 5rem;\r\n`;\r\nconst TitleInput = styled.input`\r\n    font-size: 3rem;\r\n    outline: none;\r\n    padding-bottom: 0.5rem;\r\n    border: none;\r\n    border-bottom: 1px solid ${palette.gray[4]};\r\n    margin-bottom: 2rem;\r\n    width: 100%;\r\n`;\r\n\r\nconst QuillWrapper = styled.div`\r\n    /* 최소 크기 지정 및 padding 제거 */\r\n    .ql-editor {\r\n        padding: 0;\r\n        min-height: 320px;\r\n        font-size: 1.125rem;\r\n        line-height: 1.5;\r\n    }\r\n    .ql-editor.ql-blank::before {\r\n        left: 0px;\r\n    }\r\n`;\r\n\r\nconst Editor = ({ title, body, onChangeField }) => {\r\n    const quillElement = useRef(null); // Quill을 적용할 DivElement를 설정\r\n    const quillInstance = useRef(null); // Quill 인스턴스를 설정\r\n\r\n    useEffect(() => {\r\n        quillInstance.current = new Quill(quillElement.current, {\r\n            theme: 'bubble',\r\n            placeholder: '내용을 작성하세요...',\r\n            modules: {\r\n                // 더 많은 옵션\r\n                // https://quilljs.com/docs/modules/toolbar/ 참고\r\n                toolbar: [\r\n                    [{ header: '1' }, { header: '2' }],\r\n                    ['bold', 'italic', 'underline', 'strike'],\r\n                    [{ list: 'ordered' }, { list: 'bullet' }],\r\n                    ['blockquote', 'code-block', 'link', 'image'],\r\n                ],\r\n            },\r\n        });\r\n\r\n        // quill에 text-change 이벤트 핸들러 등록\r\n        // 참고: https://quilljs.com/docs/api/#events\r\n        const quill = quillInstance.current;\r\n        quill.on('text-change', (delta, oldDelta, source) => {\r\n            if (source === 'user') {\r\n                onChangeField({ key: 'body', value: quill.root.innerHTML });\r\n            }\r\n        });\r\n    }, [onChangeField]);\r\n\r\n    const mounted = useRef(false);\r\n    useEffect(() => {\r\n        if (mounted.current) return;\r\n        mounted.current = true;\r\n        quillInstance.current.root.innerHTML = body;\r\n    }, [body]);\r\n\r\n    const onChangeTitle = (e) => {\r\n        onChangeField({ key: 'title', value: e.target.value });\r\n    };\r\n\r\n    return (\r\n        <EditorBlock>\r\n            <TitleInput\r\n                placeholder=\"제목을 입력하세요\"\r\n                onChange={onChangeTitle}\r\n                value={title}\r\n            />\r\n\r\n            <QuillWrapper>\r\n                <div ref={quillElement} />\r\n            </QuillWrapper>\r\n        </EditorBlock>\r\n    );\r\n};\r\n\r\nexport default Editor;\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n    createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\nconst INITIALIZE = 'write/INITIALIZE'; // 모든 내용 초기화\r\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; // 특정 key 값 바꾸기\r\nconst [WRITE_POST, WRITE_POST_SUCCESS, WRITE_POST_FAILURE] =\r\n    createRequestActionTypes('write/WRITE_POST'); // 포스트 작성\r\nconst SET_ORIGINAL_POST = 'write/SET_ORIGINAL_POST';\r\nconst [UPDATE_POST, UPDATE_POST_SUCCESS, UPDATE_POST_FAILURE] =\r\n    createRequestActionTypes('write/UPDATE_POST'); // 포스트 수정\r\n\r\nexport const initialize = createAction(INITIALIZE);\r\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\r\n    key,\r\n    value,\r\n}));\r\nexport const writePost = createAction(WRITE_POST, ({ title, body, tags }) => ({\r\n    title,\r\n    body,\r\n    tags,\r\n}));\r\nexport const setOriginalPost = createAction(SET_ORIGINAL_POST, (post) => post);\r\nexport const updatePost = createAction(\r\n    UPDATE_POST,\r\n    ({ id, title, body, tags }) => ({\r\n        id,\r\n        title,\r\n        body,\r\n        tags,\r\n    }),\r\n);\r\n\r\n// 사가 생성\r\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\r\nconst updatePostSaga = createRequestSaga(UPDATE_POST, postsAPI.updatePost);\r\nexport function* writeSaga() {\r\n    yield takeLatest(WRITE_POST, writePostSaga);\r\n    yield takeLatest(UPDATE_POST, updatePostSaga);\r\n}\r\n\r\nconst initialState = {\r\n    title: '',\r\n    body: '',\r\n    tags: [],\r\n    post: null,\r\n    postError: null,\r\n    originalPostId: null,\r\n};\r\n\r\nconst write = handleActions(\r\n    {\r\n        [INITIALIZE]: (state) => initialState, // initialState를 넣으면 초기 상태로 바뀜\r\n        [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\r\n            ...state,\r\n            [key]: value, // 특정 key 값을 업데이트\r\n        }),\r\n        [WRITE_POST]: (state) => ({\r\n            ...state,\r\n            // post와 postError를 초기화\r\n            post: null,\r\n            postError: null,\r\n        }),\r\n        // 포스트 작성 성공\r\n        [WRITE_POST_SUCCESS]: (state, { payload: post }) => ({\r\n            ...state,\r\n            post,\r\n        }),\r\n        // 포스트 작성 실패\r\n        [WRITE_POST_FAILURE]: (state, { payload: postError }) => ({\r\n            ...state,\r\n            postError,\r\n        }),\r\n        [SET_ORIGINAL_POST]: (state, { payload: post }) => ({\r\n            ...state,\r\n            title: post.title,\r\n            body: post.body,\r\n            tags: post.tags,\r\n            originalPostId: post._id,\r\n        }),\r\n        [UPDATE_POST_SUCCESS]: (state, { payload: post }) => ({\r\n            ...state,\r\n            post,\r\n        }),\r\n        [UPDATE_POST_FAILURE]: (state, { payload: postError }) => ({\r\n            ...state,\r\n            postError,\r\n        }),\r\n    },\r\n    initialState,\r\n);\r\n\r\nexport default write;\r\n","import { useEffect, useCallback } from 'react';\r\nimport Editor from '../../components/write/Editor';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { changeField, initialize } from '../../modules/write';\r\n\r\nconst EditorContainer = () => {\r\n    const dispatch = useDispatch();\r\n    const { title, body } = useSelector(({ write }) => ({\r\n        title: write.title,\r\n        body: write.body,\r\n    }));\r\n    const onChangeField = useCallback(\r\n        (payload) => dispatch(changeField(payload)),\r\n        [dispatch],\r\n    );\r\n    // 언마운트될 때 초기화\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(initialize());\r\n        };\r\n    }, [dispatch]);\r\n    return <Editor onChangeField={onChangeField} title={title} body={body} />;\r\n};\r\n\r\nexport default EditorContainer;\r\n","import React, { useState, useCallback, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\n\r\nconst TagBoxBlock = styled.div`\r\n    width: 100%;\r\n    border-top: 1px solid ${palette.gray[2]};\r\n    padding-top: 2rem;\r\n\r\n    h4 {\r\n        color: ${palette.gray[8]};\r\n        margin-top: 0;\r\n        margin-bottom: 0.5rem;\r\n    }\r\n`;\r\n\r\nconst TagForm = styled.form`\r\n    border-radius: 4px;\r\n    overflow: hidden;\r\n    display: flex;\r\n    width: 256px;\r\n    border: 1px solid ${palette.gray[9]}; /* 스타일 초기화 */\r\n    input,\r\n    button {\r\n        outline: none;\r\n        border: none;\r\n        font-size: 1rem;\r\n    }\r\n\r\n    input {\r\n        padding: 0.5rem;\r\n        flex: 1;\r\n        min-width: 0;\r\n    }\r\n    button {\r\n        cursor: pointer;\r\n        padding-right: 1rem;\r\n        padding-left: 1rem;\r\n        border: none;\r\n        background: ${palette.gray[8]};\r\n        color: white;\r\n        font-weight: bold;\r\n        &:hover {\r\n            background: ${palette.gray[6]};\r\n        }\r\n    }\r\n`;\r\n\r\nconst Tag = styled.div`\r\n    margin-right: 0.5rem;\r\n    color: ${palette.gray[6]};\r\n    cursor: pointer;\r\n    &:hover {\r\n        opacity: 0.5;\r\n    }\r\n`;\r\n\r\nconst TagListBlock = styled.div`\r\n    display: flex;\r\n    opacity: 0.5;\r\n`;\r\n\r\n// React.memo를 사용하여 tag 값이 바뀔 때만 리렌더링되도록 처리\r\nconst TagItem = React.memo(({ tag, onRemove }) => (\r\n    <Tag onClick={() => onRemove(tag)}>#{tag}</Tag>\r\n));\r\n\r\n// React.memo를 사용하여 tags 값이 바뀔 때만 리렌더링되도록 처리\r\nconst TagList = React.memo(({ tags, onRemove }) => (\r\n    <TagListBlock>\r\n        {tags.map((tag) => (\r\n            <TagItem key={tag} tag={tag} onRemove={onRemove} />\r\n        ))}\r\n    </TagListBlock>\r\n));\r\n\r\nconst TagBox = ({ tags, onChangeTags }) => {\r\n    const [input, setInput] = useState('');\r\n    const [localTags, setLocalTags] = useState([]);\r\n\r\n    const insertTag = useCallback(\r\n        (tag) => {\r\n            if (!tag) return; // 공백이라면 추가하지 않음\r\n            if (localTags.includes(tag)) return; // 이미 존재한다면 추가하지 않음\r\n            const nextTags = [...localTags, tag];\r\n            setLocalTags(nextTags);\r\n            onChangeTags(nextTags);\r\n        },\r\n        [localTags, onChangeTags],\r\n    );\r\n\r\n    const onRemove = useCallback(\r\n        (tag) => {\r\n            const nextTags = localTags.filter((t) => t !== tag);\r\n            setLocalTags(nextTags);\r\n            onChangeTags(nextTags);\r\n        },\r\n        [localTags, onChangeTags],\r\n    );\r\n\r\n    const onChange = useCallback((e) => {\r\n        setInput(e.target.value);\r\n    }, []);\r\n\r\n    const onSubmit = useCallback(\r\n        (e) => {\r\n            e.preventDefault();\r\n            insertTag(input.trim()); // 앞뒤 공백을 없앤 후 등록\r\n            setInput(''); // input 초기화\r\n        },\r\n        [input, insertTag],\r\n    );\r\n\r\n    // tags 값이 바뀔 때\r\n    useEffect(() => {\r\n        setLocalTags(tags);\r\n    }, [tags]);\r\n\r\n    return (\r\n        <TagBoxBlock>\r\n            <h4>태그</h4>\r\n            <TagForm onSubmit={onSubmit}>\r\n                <input\r\n                    placeholder=\"태그를 입력하세요\"\r\n                    value={input}\r\n                    onChange={onChange}\r\n                />\r\n                <button type=\"submit\">추가</button>\r\n            </TagForm>\r\n            <TagList tags={localTags} onRemove={onRemove} />\r\n        </TagBoxBlock>\r\n    );\r\n};\r\n\r\nexport default TagBox;\r\n","import { useDispatch, useSelector } from 'react-redux';\r\nimport TagBox from '../../components/write/TagBox';\r\nimport { changeField } from '../../modules/write';\r\n\r\nconst TagBoxContainer = () => {\r\n    const dispatch = useDispatch();\r\n    const tags = useSelector((state) => state.write.tags);\r\n\r\n    const onChangeTags = (nextTags) => {\r\n        dispatch(\r\n            changeField({\r\n                key: 'tags',\r\n                value: nextTags,\r\n            }),\r\n        );\r\n    };\r\n\r\n    return <TagBox onChangeTags={onChangeTags} tags={tags} />;\r\n};\r\n\r\nexport default TagBoxContainer;\r\n","import styled from 'styled-components';\r\nimport Button from '../common/Button';\r\n\r\nconst WriteActionButtonsBlock = styled.div`\r\n    margin-top: 1rem;\r\n    margin-bottom: 3rem;\r\n    button + button {\r\n        margin-left: 0.5rem;\r\n    }\r\n`;\r\n\r\n/* TagBox에서 사용하는 버튼과 일치하는 높이로 설정한 후 서로 간의 여백 지정*/\r\nconst StyledButton = styled(Button)`\r\n    height: 2.125rem;\r\n    & + & {\r\n        margin-left: 0.5rem;\r\n    }\r\n`;\r\n\r\nconst WriteActionButtons = ({ onCancel, onPublish, isEdit }) => {\r\n    return (\r\n        <WriteActionButtonsBlock>\r\n            <StyledButton cyan onClick={onPublish}>\r\n                포스트 {isEdit ? '수정' : '등록'}\r\n            </StyledButton>\r\n            <StyledButton onClick={onCancel}>취소</StyledButton>\r\n        </WriteActionButtonsBlock>\r\n    );\r\n};\r\n\r\nexport default WriteActionButtons;\r\n","import { useEffect } from 'react';\r\nimport WriteActionButtons from '../../components/write/WriteActionButtons';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { writePost, updatePost } from '../../modules/write';\r\n\r\nconst WriteActionButtonsContainer = ({ history }) => {\r\n    const dispatch = useDispatch();\r\n    const { title, body, tags, post, postError, originalPostId } = useSelector(\r\n        ({ write }) => ({\r\n            title: write.title,\r\n            body: write.body,\r\n            tags: write.tags,\r\n            post: write.post,\r\n            postError: write.postError,\r\n            originalPostId: write.originalPostId,\r\n        }),\r\n    );\r\n\r\n    // 포스트 등록\r\n    const onPublish = () => {\r\n        if (originalPostId) {\r\n            dispatch(updatePost({ title, body, tags, id: originalPostId }));\r\n            return;\r\n        }\r\n        dispatch(\r\n            writePost({\r\n                title,\r\n                body,\r\n                tags,\r\n            }),\r\n        );\r\n    };\r\n\r\n    // 취소\r\n    const onCancel = () => {\r\n        history.goBack();\r\n    };\r\n\r\n    // 성공 혹은 실패 시 할 작업\r\n    useEffect(() => {\r\n        if (post) {\r\n            const { _id, user } = post;\r\n            history.push(`/@${user.username}/${_id}`);\r\n        }\r\n        if (postError) {\r\n            console.log(postError);\r\n        }\r\n    }, [history, post, postError]);\r\n    return (\r\n        <WriteActionButtons\r\n            onPublish={onPublish}\r\n            onCancel={onCancel}\r\n            isEdit={!!originalPostId}\r\n        />\r\n    );\r\n};\r\n\r\nexport default withRouter(WriteActionButtonsContainer);\r\n","import EditorContainer from '../containers/write/EditorContainer';\r\nimport TagBoxContainer from '../containers/write/TagBoxContainer';\r\nimport WriteActionButtonsContainer from '../containers/write/WriteActionButtonsContainer';\r\nimport Responsive from '../components/common/Responsive';\r\nimport { Helmet } from 'react-helmet-async';\r\n\r\nconst WritePage = () => {\r\n    return (\r\n        <Responsive>\r\n            <Helmet>\r\n                <title>글 작성하기 - REACTERS</title>\r\n            </Helmet>\r\n            <EditorContainer />\r\n            <TagBoxContainer />\r\n            <WriteActionButtonsContainer />\r\n        </Responsive>\r\n    );\r\n};\r\n\r\nexport default WritePage;\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n    createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\nconst [READ_POST, READ_POST_SUCCESS, READ_POST_FAILURE] =\r\n    createRequestActionTypes('post/READ_POST');\r\nconst UNLOAD_POST = 'post/UNLOAD_POST'; // 포스트 페이지에서 벗어날 때 데이터 비우기\r\n\r\nexport const readPost = createAction(READ_POST, (id) => id);\r\nexport const unloadPost = createAction(UNLOAD_POST);\r\n\r\nconst readPostSaga = createRequestSaga(READ_POST, postsAPI.readPost);\r\nexport function* postSaga() {\r\n    yield takeLatest(READ_POST, readPostSaga);\r\n}\r\n\r\nconst initialState = {\r\n    post: null,\r\n    error: null,\r\n};\r\n\r\nconst post = handleActions(\r\n    {\r\n        [READ_POST_SUCCESS]: (state, { payload: post }) => ({\r\n            ...state,\r\n            post,\r\n        }),\r\n        [READ_POST_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            error,\r\n        }),\r\n        [UNLOAD_POST]: () => initialState,\r\n    },\r\n    initialState,\r\n);\r\n\r\nexport default post;\r\n","import styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport Responsive from '../common/Responsive';\r\nimport SubInfo from '../common/SubInfo';\r\nimport Tags from '../common/Tags';\r\nimport { Helmet } from 'react-helmet-async';\r\n\r\nconst PostViewerBlock = styled(Responsive)`\r\n    margin-top: 4rem;\r\n`;\r\nconst PostHead = styled.div`\r\n    border-bottom: 1px solid ${palette.gray[2]};\r\n    padding-bottom: 3rem;\r\n    margin-bottom: 3rem;\r\n    h1 {\r\n        font-size: 3rem;\r\n        line-height: 1.5;\r\n        margin: 0;\r\n    }\r\n`;\r\n// const SubInfo = styled.div`\r\n//     margin-top: 1rem;\r\n//     color: ${palette.gray[6]};\r\n\r\n//     /* span 사이에 가운뎃점 문자 보여주기 */\r\n//     span + span:before {\r\n//         color: ${palette.gray[5]};\r\n//         padding-left: 0.25rem;\r\n//         padding-right: 0.25rem;\r\n//         content: '\\\\B7'; /* 가운뎃점 문자*/\r\n//     }\r\n// `;\r\n\r\n// const Tags = styled.div`\r\n//     margin-top: 0.5rem;\r\n//     .tag {\r\n//         display: inline-block;\r\n//         color: ${palette.cyan[7]};\r\n//         text-decoration: none;\r\n//         margin-right: 0.5rem;\r\n//         &:hover {\r\n//             color: ${palette.cyan[6]};\r\n//         }\r\n//     }\r\n// `;\r\n\r\nconst PostContent = styled.div`\r\n    font-size: 1.3125rem;\r\n    color: ${palette.gray[8]};\r\n`;\r\n\r\nconst PostViewer = ({ post, error, loading, actionButtons }) => {\r\n    // 에러 발생 시\r\n    if (error) {\r\n        if (error.response && error.response.status === 404) {\r\n            return (\r\n                <PostViewerBlock>존재하지 않는 포스트입니다.</PostViewerBlock>\r\n            );\r\n        }\r\n        return <PostViewerBlock>오류 발생!</PostViewerBlock>;\r\n    }\r\n\r\n    // 로딩 중이거나 아직 포스트 데이터가 없을 때\r\n    if (loading || !post) {\r\n        return null;\r\n    }\r\n    const { title, body, user, publishedDate, tags } = post;\r\n    return (\r\n        <PostViewerBlock>\r\n            <Helmet>\r\n                <title>{title} - REACTERS</title>\r\n            </Helmet>\r\n            <PostHead>\r\n                <h1>{title}</h1>\r\n                <SubInfo\r\n                    username={user.username}\r\n                    publishedDate={publishedDate}\r\n                    hasMarginTop\r\n                />\r\n                <Tags tags={tags} />\r\n            </PostHead>\r\n            {actionButtons}\r\n            <PostContent\r\n                dangerouslySetInnerHTML={{\r\n                    __html: body,\r\n                }}\r\n            />\r\n        </PostViewerBlock>\r\n    );\r\n};\r\n\r\nexport default PostViewer;\r\n","import styled from 'styled-components';\r\nimport Button from './Button';\r\n\r\nconst Fullscreen = styled.div`\r\n    position: fixed;\r\n    z-index: 30;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background: rgba(0, 0, 0, 0.25);\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`;\r\nconst AskModalBlock = styled.div`\r\n    width: 320px;\r\n    background: white;\r\n    padding: 1.5rem;\r\n    border-radius: 4px;\r\n    box-shadow: 0px 0px 8px rgba(0, 0, 0, 0.125);\r\n    h2 {\r\n        margin-top: 0;\r\n        margin-bottom: 1rem;\r\n    }\r\n    p {\r\n        margin-bottom: 3rem;\r\n    }\r\n    .buttons {\r\n        display: flex;\r\n        justify-content: flex-end;\r\n    }\r\n`;\r\n\r\nconst StyledButton = styled(Button)`\r\n    height: 2rem;\r\n    & + & {\r\n        margin-left: 0.75rem;\r\n    }\r\n`;\r\n\r\nconst AskModal = ({\r\n    visible,\r\n    title,\r\n    description,\r\n    confirmText = '확인',\r\n    cancelText = '취소',\r\n    onConfirm,\r\n    onCancel,\r\n}) => {\r\n    if (!visible) return null;\r\n    return (\r\n        <Fullscreen>\r\n            <AskModalBlock>\r\n                <h2>{title}</h2>\r\n                <p>{description}</p>\r\n                <div className=\"buttons\">\r\n                    <StyledButton onClick={onCancel}>{cancelText}</StyledButton>\r\n                    <StyledButton cyan onClick={onConfirm}>\r\n                        {confirmText}\r\n                    </StyledButton>\r\n                </div>\r\n            </AskModalBlock>\r\n        </Fullscreen>\r\n    );\r\n};\r\n\r\nexport default AskModal;\r\n","import AskModal from '../common/AskModal';\r\n\r\nconst AskRemoveModal = ({ visible, onConfirm, onCancel }) => {\r\n    return (\r\n        <AskModal\r\n            visible={visible}\r\n            title=\"포스트 삭제\"\r\n            description=\"포스트를 정말 삭제하시겠습니까?\"\r\n            confirmText=\"삭제\"\r\n            onConfirm={onConfirm}\r\n            onCancel={onCancel}\r\n        />\r\n    );\r\n};\r\n\r\nexport default AskRemoveModal;\r\n","import { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport AskRemoveModal from './AskRemoveModal';\r\n\r\nconst PostActionButtonsBlock = styled.div`\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    margin-bottom: 2rem;\r\n    margin-top: -1.5rem;\r\n`;\r\n\r\nconst ActionButton = styled.button`\r\n    padding: 0.25rem 0.5rem;\r\n    border-radius: 4px;\r\n    color: ${palette.gray[6]};\r\n    font-weight: bold;\r\n    border: none;\r\n    outline: none;\r\n    font-size: 0.875rem;\r\n    cursor: pointer;\r\n    &:hover {\r\n        background: ${palette.gray[1]};\r\n        color: ${palette.cyan[7]};\r\n    }\r\n    & + & {\r\n        margin-left: 0.25rem;\r\n    }\r\n`;\r\n\r\nconst PostActionButtons = ({ onEdit, onRemove }) => {\r\n    const [modal, setModal] = useState(false);\r\n    const onRemoveClick = () => {\r\n        setModal(true);\r\n    };\r\n    const onCancel = () => {\r\n        setModal(false);\r\n    };\r\n    const onConfirm = () => {\r\n        setModal(false);\r\n        onRemove();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <PostActionButtonsBlock>\r\n                <ActionButton onClick={onEdit}>수정</ActionButton>\r\n                <ActionButton onClick={onRemoveClick}>삭제</ActionButton>\r\n            </PostActionButtonsBlock>\r\n            <AskRemoveModal\r\n                visible={modal}\r\n                onConfirm={onConfirm}\r\n                onCancel={onCancel}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PostActionButtons;\r\n","import { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { readPost, unloadPost } from '../../modules/post';\r\nimport PostViewer from '../../components/post/PostViewer';\r\nimport PostActionButtons from '../../components/post/PostActionButtons';\r\nimport { setOriginalPost } from '../../modules/write';\r\nimport { removePost } from '../../lib/api/posts';\r\n\r\nconst PostViewerContainer = ({ match, history }) => {\r\n    // 처음 마운트될 때 포스트 읽기 API 요청\r\n    const { postId } = match.params;\r\n    const dispatch = useDispatch();\r\n    const { post, error, loading, user } = useSelector(\r\n        ({ post, loading, user }) => ({\r\n            post: post.post,\r\n            error: post.error,\r\n            loading: loading['post/READ_POST'],\r\n            user: user.user,\r\n        }),\r\n    );\r\n\r\n    useEffect(() => {\r\n        dispatch(readPost(postId));\r\n        // 언마운트될 때 리덕스에서 포스트 데이터 없애기\r\n        return () => {\r\n            dispatch(unloadPost());\r\n        };\r\n    }, [dispatch, postId]);\r\n\r\n    const onEdit = () => {\r\n        dispatch(setOriginalPost(post));\r\n        history.push('/write');\r\n    };\r\n\r\n    const onRemove = async () => {\r\n        try {\r\n            await removePost(postId);\r\n            history.push('/'); // 홈으로 이동\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    };\r\n\r\n    const ownPost = (user && user._id) === (post && post.user._id);\r\n\r\n    return (\r\n        <PostViewer\r\n            post={post}\r\n            loading={loading}\r\n            error={error}\r\n            actionButtons={\r\n                ownPost && (\r\n                    <PostActionButtons onEdit={onEdit} onRemove={onRemove} />\r\n                )\r\n            }\r\n        />\r\n    );\r\n};\r\n\r\nexport default withRouter(PostViewerContainer);\r\n","import HeaderContainer from '../containers/common/HeaderContainer';\r\nimport PostViewerContainer from '../containers/post/PostViewerContainer';\r\n\r\nconst PostPage = () => {\r\n    return (\r\n        <>\r\n            <HeaderContainer />\r\n            <PostViewerContainer />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PostPage;\r\n","import { Route } from 'react-router-dom';\r\nimport PostListPage from './pages/PostListPage';\r\nimport LoginPage from './pages/LoginPage';\r\nimport RegisterPage from './pages/RegisterPage';\r\nimport WritePage from './pages/WritePage';\r\nimport PostPage from './pages/PostPage';\r\nimport { Helmet } from 'react-helmet-async';\r\n\r\nconst App = () => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>REACTERS</title>\r\n            </Helmet>\r\n            <Route component={PostListPage} path={['/@:username', '/']} exact />\r\n            <Route component={LoginPage} path=\"/login\" />\r\n            <Route component={RegisterPage} path=\"/register\" />\r\n            <Route component={WritePage} path=\"/write\" />\r\n            <Route component={PostPage} path=\"/@:username/:postId\" />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import { combineReducers } from 'redux';\r\nimport { all } from 'redux-saga/effects';\r\nimport auth, { authSaga } from './auth';\r\nimport loading from './loading';\r\nimport user, { userSaga } from './user';\r\nimport write, { writeSaga } from './write';\r\nimport post, { postSaga } from './post';\r\nimport posts, { postsSaga } from './posts';\r\n\r\nconst rootReducer = combineReducers({\r\n    auth,\r\n    loading,\r\n    user,\r\n    write,\r\n    post,\r\n    posts,\r\n});\r\n\r\nexport function* rootSaga() {\r\n    yield all([authSaga(), userSaga(), writeSaga(), postSaga(), postsSaga()]);\r\n}\r\n\r\nexport default rootReducer;\r\n","import ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootReducer, { rootSaga } from './modules';\r\nimport { tempSetUser, check } from './modules/user';\r\nimport { HelmetProvider } from 'react-helmet-async';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst store = createStore(\r\n    rootReducer,\r\n    composeWithDevTools(applyMiddleware(sagaMiddleware)),\r\n);\r\n\r\nfunction loadUser() {\r\n    try {\r\n        const user = localStorage.getItem('user');\r\n        if (!user) return; // 로그인 상태가 아니라면 아무것도 안 함\r\n\r\n        store.dispatch(tempSetUser(JSON.parse(user)));\r\n        store.dispatch(check());\r\n    } catch (e) {\r\n        console.log('localStorage is not working');\r\n    }\r\n}\r\nsagaMiddleware.run(rootSaga);\r\nloadUser();\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <HelmetProvider>\r\n                <App />\r\n            </HelmetProvider>\r\n        </BrowserRouter>\r\n    </Provider>,\r\n\r\n    document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}